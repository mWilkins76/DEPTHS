// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.exists = function(it,f) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) if(f(tmp.next())) {
		return true;
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) if(!f(tmp.next())) {
		return false;
	}
	return true;
};
Lambda.fold = function(it,f,first) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) first = f(tmp.next(),first);
	return first;
};
Lambda.find = function(it,f) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) {
		var v = tmp.next();
		if(f(v)) {
			return v;
		}
	}
	return null;
};
Math.__name__ = ["Math"];
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null?this._perfObj.now():new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(($_=window,$bind($_,$_.cancelAnimationFrame)) != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
$hxClasses["Perf"] = Perf;
Perf.__name__ = ["Perf"];
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null?this._perfObj.now():new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null?this._perfObj.now():new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		switch(this._pos) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck?48:32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck?48:32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck?48:32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null?this._perfObj.now():new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
	,__class__: Perf
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var com_isartdigital_ruby_Main = function() {
	EventEmitter.call(this);
	var lOptions = { };
	lOptions.backgroundColor = 10066329;
	com_isartdigital_utils_system_DeviceCapabilities.scaleViewport();
	this.renderer = PIXI.autoDetectRenderer(_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_width()),_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_height()),lOptions);
	window.document.body.appendChild(this.renderer.view);
	this.stage = new PIXI.Container();
	var lConfig = new PIXI.loaders.Loader();
	com_isartdigital_ruby_Main.configPath += "?" + new Date().getTime();
	lConfig.add(com_isartdigital_ruby_Main.configPath);
	lConfig.once("complete",$bind(this,this.preloadAssets));
	lConfig.load();
};
$hxClasses["com.isartdigital.ruby.Main"] = com_isartdigital_ruby_Main;
com_isartdigital_ruby_Main.__name__ = ["com","isartdigital","ruby","Main"];
com_isartdigital_ruby_Main.main = function() {
	com_isartdigital_ruby_Main.getInstance();
};
com_isartdigital_ruby_Main.getInstance = function() {
	if(com_isartdigital_ruby_Main.instance == null) {
		com_isartdigital_ruby_Main.instance = new com_isartdigital_ruby_Main();
	}
	return com_isartdigital_ruby_Main.instance;
};
com_isartdigital_ruby_Main.__super__ = EventEmitter;
com_isartdigital_ruby_Main.prototype = $extend(EventEmitter.prototype,{
	preloadAssets: function(pLoader) {
		com_isartdigital_utils_Config.init(Reflect.field(pLoader.resources,com_isartdigital_ruby_Main.configPath).data);
		if(com_isartdigital_utils_Config.get_debug()) {
			com_isartdigital_utils_Debug.getInstance().init();
		}
		if(com_isartdigital_utils_Config.get_debug() && com_isartdigital_utils_Config.get_data().boxAlpha != null) {
			com_isartdigital_utils_game_StateGraphic.boxAlpha = com_isartdigital_utils_Config.get_data().boxAlpha;
		}
		if(com_isartdigital_utils_Config.get_debug() && com_isartdigital_utils_Config.get_data().animAlpha != null) {
			com_isartdigital_utils_game_StateGraphic.animAlpha = com_isartdigital_utils_Config.get_data().animAlpha;
		}
		com_isartdigital_utils_game_GameStage.getInstance().set_scaleMode(com_isartdigital_utils_game_GameStageScale.SHOW_ALL);
		if(com_isartdigital_utils_system_DeviceCapabilities.get_system() == "Desktop") {
			com_isartdigital_utils_game_GameStage.getInstance().set_scaleMode(com_isartdigital_utils_game_GameStageScale.NO_SCALE);
			com_isartdigital_utils_system_DeviceCapabilities.textureRatio = 0.5;
			com_isartdigital_utils_system_DeviceCapabilities.textureType = "ld";
		} else {
			com_isartdigital_utils_game_GameStage.getInstance().set_scaleMode(com_isartdigital_utils_game_GameStageScale.SHOW_ALL);
			com_isartdigital_utils_system_DeviceCapabilities.init(1,0.75,0.5);
		}
		com_isartdigital_utils_game_GameStage.getInstance().init($bind(this,this.render),2048,1366);
		com_isartdigital_utils_system_DeviceCapabilities.displayFullScreenButton();
		this.stage.addChild(com_isartdigital_utils_game_GameStage.getInstance());
		window.addEventListener("resize",$bind(this,this.resize));
		this.resize();
		var lLoader = new com_isartdigital_utils_loader_GameLoader();
		lLoader.addAssetFile("black_bg.png");
		lLoader.addAssetFile("preload.png");
		lLoader.addAssetFile("preload_bg.png");
		lLoader.once("complete",$bind(this,this.loadAssets));
		lLoader.load();
	}
	,loadAssets: function(pLoader) {
		var lLoader = new com_isartdigital_utils_loader_GameLoader();
		lLoader.addTxtFile("boxes.json");
		lLoader.addSoundFile("sounds.json");
		lLoader.addAssetFile("alpha_bg.png");
		lLoader.addAssetFile("TitleCard_bg.png");
		lLoader.addAssetFile("Confirm.png");
		lLoader.addAssetFile("Template.json");
		lLoader.addAssetFile(com_isartdigital_utils_system_DeviceCapabilities.textureType + "/placeholder/library.json");
		lLoader.addFontFile("fonts.css");
		lLoader.on("progress",$bind(this,this.onLoadProgress));
		lLoader.once("complete",$bind(this,this.onLoadComplete));
		com_isartdigital_ruby_ui_UIManager.getInstance().openScreen(com_isartdigital_ruby_ui_GraphicLoader.getInstance());
		window.requestAnimationFrame($bind(this,this.gameLoop));
		lLoader.load();
	}
	,onLoadProgress: function(pLoader) {
		com_isartdigital_ruby_ui_GraphicLoader.getInstance().update(pLoader.progress / 100);
	}
	,onLoadComplete: function(pLoader) {
		pLoader.off("progress",$bind(this,this.onLoadProgress));
		com_isartdigital_utils_game_factory_MovieClipAnimFactory.addTextures(com_isartdigital_utils_loader_GameLoader.getContent("Template.json"));
		com_isartdigital_utils_game_StateGraphic.addBoxes(com_isartdigital_utils_loader_GameLoader.getContent("boxes.json"));
		com_isartdigital_ruby_ui_UIManager.getInstance().openScreen(com_isartdigital_ruby_ui_screens_TitleCard.getInstance());
	}
	,gameLoop: function(pID) {
		window.requestAnimationFrame($bind(this,this.gameLoop));
		this.render();
		this.emit("gameLoop");
	}
	,resize: function(pEvent) {
		this.renderer.resize(_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_width()),_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_height()));
		com_isartdigital_utils_game_GameStage.getInstance().resize();
	}
	,render: function() {
		this.renderer.render(this.stage);
	}
	,destroy: function() {
		window.removeEventListener("resize",$bind(this,this.resize));
		com_isartdigital_ruby_Main.instance = null;
	}
	,__class__: com_isartdigital_ruby_Main
});
var com_isartdigital_ruby_game_GameManager = function() {
};
$hxClasses["com.isartdigital.ruby.game.GameManager"] = com_isartdigital_ruby_game_GameManager;
com_isartdigital_ruby_game_GameManager.__name__ = ["com","isartdigital","ruby","game","GameManager"];
com_isartdigital_ruby_game_GameManager.getInstance = function() {
	if(com_isartdigital_ruby_game_GameManager.instance == null) {
		com_isartdigital_ruby_game_GameManager.instance = new com_isartdigital_ruby_game_GameManager();
	}
	return com_isartdigital_ruby_game_GameManager.instance;
};
com_isartdigital_ruby_game_GameManager.prototype = {
	start: function() {
		com_isartdigital_ruby_ui_UIManager.getInstance().startGame();
		var lBuildings = ["House","Villa","Trees","Factory","WindTurbine"];
		var lBuilding;
		var _g1 = 0;
		var _g = lBuildings.length;
		while(_g1 < _g) {
			var i = _g1++;
			lBuilding = new com_isartdigital_ruby_game_sprites_FlumpStateGraphic(lBuildings[i]);
			com_isartdigital_utils_game_GameStage.getInstance().getGameContainer().addChild(lBuilding);
			lBuilding.start();
			lBuilding.x = i * 500;
			lBuilding.y = 750;
		}
		com_isartdigital_ruby_ui_CheatPanel.getInstance().ingame();
		com_isartdigital_ruby_Main.getInstance().on("gameLoop",$bind(this,this.gameLoop));
	}
	,gameLoop: function(pEvent) {
	}
	,destroy: function() {
		com_isartdigital_ruby_Main.getInstance().off("gameLoop",$bind(this,this.gameLoop));
		com_isartdigital_ruby_game_GameManager.instance = null;
	}
	,__class__: com_isartdigital_ruby_game_GameManager
};
var com_isartdigital_utils_game_GameObject = function() {
	PIXI.Container.call(this);
	this.on("added",$bind(this,this.updateTransform));
};
$hxClasses["com.isartdigital.utils.game.GameObject"] = com_isartdigital_utils_game_GameObject;
com_isartdigital_utils_game_GameObject.__name__ = ["com","isartdigital","utils","game","GameObject"];
com_isartdigital_utils_game_GameObject.__super__ = PIXI.Container;
com_isartdigital_utils_game_GameObject.prototype = $extend(PIXI.Container.prototype,{
	destroy: function() {
		this.off("added",$bind(this,this.updateTransform));
		PIXI.Container.prototype.destroy.call(this,true);
	}
	,__class__: com_isartdigital_utils_game_GameObject
});
var com_isartdigital_utils_game_IStateMachine = function() { };
$hxClasses["com.isartdigital.utils.game.IStateMachine"] = com_isartdigital_utils_game_IStateMachine;
com_isartdigital_utils_game_IStateMachine.__name__ = ["com","isartdigital","utils","game","IStateMachine"];
com_isartdigital_utils_game_IStateMachine.prototype = {
	__class__: com_isartdigital_utils_game_IStateMachine
};
var com_isartdigital_utils_game_StateMachine = function() {
	com_isartdigital_utils_game_GameObject.call(this);
	this.setModeVoid();
};
$hxClasses["com.isartdigital.utils.game.StateMachine"] = com_isartdigital_utils_game_StateMachine;
com_isartdigital_utils_game_StateMachine.__name__ = ["com","isartdigital","utils","game","StateMachine"];
com_isartdigital_utils_game_StateMachine.__interfaces__ = [com_isartdigital_utils_game_IStateMachine];
com_isartdigital_utils_game_StateMachine.__super__ = com_isartdigital_utils_game_GameObject;
com_isartdigital_utils_game_StateMachine.prototype = $extend(com_isartdigital_utils_game_GameObject.prototype,{
	setModeVoid: function() {
		this.doAction = $bind(this,this.doActionVoid);
	}
	,doActionVoid: function() {
	}
	,setModeNormal: function() {
		this.doAction = $bind(this,this.doActionNormal);
	}
	,doActionNormal: function() {
	}
	,start: function() {
		this.setModeNormal();
	}
	,destroy: function() {
		this.setModeVoid();
		com_isartdigital_utils_game_GameObject.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_utils_game_StateMachine
});
var com_isartdigital_utils_game_StateGraphic = function() {
	this.boxType = com_isartdigital_utils_game_BoxType.NONE;
	this.DEFAULT_STATE = "";
	this.BOX_SUFFIX = "box";
	this.ANIM_SUFFIX = "";
	com_isartdigital_utils_game_StateMachine.call(this);
};
$hxClasses["com.isartdigital.utils.game.StateGraphic"] = com_isartdigital_utils_game_StateGraphic;
com_isartdigital_utils_game_StateGraphic.__name__ = ["com","isartdigital","utils","game","StateGraphic"];
com_isartdigital_utils_game_StateGraphic.addBoxes = function(pJson) {
	if(com_isartdigital_utils_game_StateGraphic.boxesCache == null) {
		com_isartdigital_utils_game_StateGraphic.boxesCache = new haxe_ds_StringMap();
	}
	var lItem;
	var lObj;
	var _g = 0;
	var _g1 = Reflect.fields(pJson);
	while(_g < _g1.length) {
		var lName = _g1[_g];
		++_g;
		lItem = Reflect.field(pJson,lName);
		var v = new haxe_ds_StringMap();
		var _this = com_isartdigital_utils_game_StateGraphic.boxesCache;
		if(__map_reserved[lName] != null) {
			_this.setReserved(lName,v);
		} else {
			_this.h[lName] = v;
		}
		var _g2 = 0;
		var _g3 = Reflect.fields(lItem);
		while(_g2 < _g3.length) {
			var lObjName = _g3[_g2];
			++_g2;
			lObj = Reflect.field(lItem,lObjName);
			if(lObj.type == "Rectangle") {
				var _this1 = com_isartdigital_utils_game_StateGraphic.boxesCache;
				var this1 = __map_reserved[lName] != null?_this1.getReserved(lName):_this1.h[lName];
				var v1 = new PIXI.Rectangle(lObj.x,lObj.y,lObj.width,lObj.height);
				this1.set(lObjName,v1);
			} else if(lObj.type == "Ellipse") {
				var _this2 = com_isartdigital_utils_game_StateGraphic.boxesCache;
				var this2 = __map_reserved[lName] != null?_this2.getReserved(lName):_this2.h[lName];
				var v2 = new PIXI.Ellipse(lObj.x,lObj.y,lObj.width / 2,lObj.height / 2);
				this2.set(lObjName,v2);
			} else if(lObj.type == "Circle") {
				var _this3 = com_isartdigital_utils_game_StateGraphic.boxesCache;
				var this3 = __map_reserved[lName] != null?_this3.getReserved(lName):_this3.h[lName];
				var v3 = new PIXI.Circle(lObj.x,lObj.y,lObj.radius);
				this3.set(lObjName,v3);
			} else if(lObj.type == "Point") {
				var _this4 = com_isartdigital_utils_game_StateGraphic.boxesCache;
				var this4 = __map_reserved[lName] != null?_this4.getReserved(lName):_this4.h[lName];
				var v4 = new PIXI.Point(lObj.x,lObj.y);
				this4.set(lObjName,v4);
			}
		}
	}
};
com_isartdigital_utils_game_StateGraphic.__super__ = com_isartdigital_utils_game_StateMachine;
com_isartdigital_utils_game_StateGraphic.prototype = $extend(com_isartdigital_utils_game_StateMachine.prototype,{
	setAnimEnd: function() {
		this.isAnimEnd = true;
	}
	,setState: function(pState,pLoop,pAutoPlay,pStart) {
		if(pStart == null) {
			pStart = 0;
		}
		if(pAutoPlay == null) {
			pAutoPlay = true;
		}
		if(pLoop == null) {
			pLoop = false;
		}
		var lClassName = Type.getClassName(js_Boot.getClass(this));
		if(this.factory == null) {
			throw new js__$Boot_HaxeError(lClassName + " :: propriété factory non définie");
		}
		if(this.state == pState) {
			if(this.anim != null) {
				this.setBehavior(pLoop,pAutoPlay,pStart);
			}
			return;
		}
		if(this.assetName == null) {
			this.assetName = lClassName.split(".").pop();
		}
		this.state = pState;
		this.anim = this.factory.getAnim();
		if(this.anim == null) {
			if(this.boxType == com_isartdigital_utils_game_BoxType.SELF) {
				if(this.box != null) {
					this.removeChild(this.box);
				}
				this.box = null;
			}
			this.anim = this.factory.create(this.getID(this.state));
			this.anim.scale.set(1 / com_isartdigital_utils_system_DeviceCapabilities.textureRatio,1 / com_isartdigital_utils_system_DeviceCapabilities.textureRatio);
			if(com_isartdigital_utils_game_StateGraphic.animAlpha < 1) {
				this.anim.alpha = com_isartdigital_utils_game_StateGraphic.animAlpha;
			}
			this.addChild(this.anim);
		} else {
			this.factory.update(this.getID(this.state));
		}
		this.isAnimEnd = false;
		this.setBehavior(pLoop,pAutoPlay,pStart);
		if(this.box == null) {
			if(this.boxType == com_isartdigital_utils_game_BoxType.SELF) {
				this.box = this.anim;
				return;
			} else {
				this.box = new PIXI.Container();
				if(this.boxType != com_isartdigital_utils_game_BoxType.NONE) {
					this.createBox();
				}
			}
			this.addChild(this.box);
		} else if(this.boxType == com_isartdigital_utils_game_BoxType.MULTIPLE) {
			this.removeChild(this.box);
			this.box = new PIXI.Container();
			this.createBox();
			this.addChild(this.box);
		}
	}
	,setBehavior: function(pLoop,pAutoPlay,pStart) {
		if(pStart == null) {
			pStart = 0;
		}
		if(pAutoPlay == null) {
			pAutoPlay = true;
		}
		if(pLoop == null) {
			pLoop = false;
		}
		this.anim.loop = pLoop;
		this.factory.setFrame(pAutoPlay,pStart);
	}
	,getID: function(pState) {
		if(pState == this.DEFAULT_STATE) {
			return this.assetName + this.ANIM_SUFFIX;
		}
		return this.assetName + "_" + pState + this.ANIM_SUFFIX;
	}
	,createBox: function() {
		var lBoxes = this.getBox((this.boxType == com_isartdigital_utils_game_BoxType.MULTIPLE?this.state + "_":"") + this.BOX_SUFFIX);
		var lChild;
		var tmp = lBoxes.keys();
		while(tmp.hasNext()) {
			var lBox = tmp.next();
			lChild = new PIXI.Graphics();
			lChild.beginFill(16720418);
			if(js_Boot.__instanceof(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox],PIXI.Rectangle)) {
				lChild.drawRect((__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).x,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).y,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).width,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).height);
			} else if(js_Boot.__instanceof(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox],PIXI.Ellipse)) {
				lChild.drawEllipse((__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).x,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).y,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).width,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).height);
			} else if(js_Boot.__instanceof(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox],PIXI.Circle)) {
				lChild.drawCircle((__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).x,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).y,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).radius);
			} else if(js_Boot.__instanceof(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox],PIXI.Point)) {
				lChild.drawCircle(0,0,10);
			}
			lChild.endFill();
			lChild.name = lBox;
			if(js_Boot.__instanceof(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox],PIXI.Point)) {
				lChild.position.set((__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).x,(__map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox]).y);
			} else {
				lChild.hitArea = __map_reserved[lBox] != null?lBoxes.getReserved(lBox):lBoxes.h[lBox];
			}
			this.box.addChild(lChild);
		}
		if(com_isartdigital_utils_game_StateGraphic.boxAlpha == 0) {
			this.box.renderable = false;
		} else {
			this.box.alpha = com_isartdigital_utils_game_StateGraphic.boxAlpha;
		}
	}
	,getBox: function(pState) {
		var _this = com_isartdigital_utils_game_StateGraphic.boxesCache;
		var key = this.assetName + "_" + pState;
		return __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
	}
	,pause: function() {
		if(this.anim != null) {
			this.anim.stop();
		}
	}
	,resume: function() {
		if(this.anim != null) {
			this.anim.play();
		}
	}
	,get_hitBox: function() {
		return this.box;
	}
	,get_hitPoints: function() {
		return null;
	}
	,destroy: function() {
		if(this.anim.stop != null) {
			this.anim.stop();
		}
		this.removeChild(this.anim);
		this.anim.destroy();
		if(this.box != this.anim) {
			this.removeChild(this.box);
			this.box.destroy();
			this.box = null;
		}
		this.anim = null;
		com_isartdigital_utils_game_StateMachine.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_utils_game_StateGraphic
});
var com_isartdigital_ruby_game_sprites_FlumpStateGraphic = function(pAsset) {
	com_isartdigital_utils_game_StateGraphic.call(this);
	if(pAsset != null) {
		this.assetName = pAsset;
	}
};
$hxClasses["com.isartdigital.ruby.game.sprites.FlumpStateGraphic"] = com_isartdigital_ruby_game_sprites_FlumpStateGraphic;
com_isartdigital_ruby_game_sprites_FlumpStateGraphic.__name__ = ["com","isartdigital","ruby","game","sprites","FlumpStateGraphic"];
com_isartdigital_ruby_game_sprites_FlumpStateGraphic.__super__ = com_isartdigital_utils_game_StateGraphic;
com_isartdigital_ruby_game_sprites_FlumpStateGraphic.prototype = $extend(com_isartdigital_utils_game_StateGraphic.prototype,{
	start: function() {
		this.factory = new com_isartdigital_utils_game_factory_FlumpMovieAnimFactory();
		com_isartdigital_utils_game_StateGraphic.prototype.start.call(this);
		this.setState(this.DEFAULT_STATE);
	}
	,__class__: com_isartdigital_ruby_game_sprites_FlumpStateGraphic
});
var com_isartdigital_ruby_game_sprites_Template = function() {
	com_isartdigital_utils_game_StateGraphic.call(this);
	this.factory = new com_isartdigital_utils_game_factory_MovieClipAnimFactory();
	this.boxType = com_isartdigital_utils_game_BoxType.SIMPLE;
	if(com_isartdigital_utils_system_DeviceCapabilities.get_system() == "Desktop") {
		window.addEventListener("click",$bind(this,this.onClick));
	} else {
		window.addEventListener("touchstart",$bind(this,this.onTouch));
	}
};
$hxClasses["com.isartdigital.ruby.game.sprites.Template"] = com_isartdigital_ruby_game_sprites_Template;
com_isartdigital_ruby_game_sprites_Template.__name__ = ["com","isartdigital","ruby","game","sprites","Template"];
com_isartdigital_ruby_game_sprites_Template.getInstance = function() {
	if(com_isartdigital_ruby_game_sprites_Template.instance == null) {
		com_isartdigital_ruby_game_sprites_Template.instance = new com_isartdigital_ruby_game_sprites_Template();
	}
	return com_isartdigital_ruby_game_sprites_Template.instance;
};
com_isartdigital_ruby_game_sprites_Template.__super__ = com_isartdigital_utils_game_StateGraphic;
com_isartdigital_ruby_game_sprites_Template.prototype = $extend(com_isartdigital_utils_game_StateGraphic.prototype,{
	setModeNormal: function() {
		this.setState(this.DEFAULT_STATE,true);
		com_isartdigital_utils_game_StateGraphic.prototype.setModeNormal.call(this);
	}
	,onTouch: function(pEvent) {
		if(!js_Boot.__instanceof(pEvent.target,HTMLCanvasElement)) {
			return;
		}
		this.setPosition(new PIXI.Point(pEvent.targetTouches[pEvent.targetTouches.length - 1].clientX,pEvent.targetTouches[pEvent.targetTouches.length - 1].clientY));
	}
	,onClick: function(pEvent) {
		if(!js_Boot.__instanceof(pEvent.target,HTMLCanvasElement)) {
			return;
		}
		this.setPosition(new PIXI.Point(pEvent.layerX,pEvent.layerY));
	}
	,setPosition: function(pGlobal) {
		var lLocal = this.parent.toLocal(pGlobal);
		this.position.set(lLocal.x,lLocal.y);
	}
	,destroy: function() {
		window.removeEventListener("click",$bind(this,this.onClick));
		window.removeEventListener("touchstart",$bind(this,this.onTouch));
		com_isartdigital_ruby_game_sprites_Template.instance = null;
		com_isartdigital_utils_game_StateGraphic.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_ruby_game_sprites_Template
});
var com_isartdigital_ruby_ui_CheatPanel = function() {
	this.init();
};
$hxClasses["com.isartdigital.ruby.ui.CheatPanel"] = com_isartdigital_ruby_ui_CheatPanel;
com_isartdigital_ruby_ui_CheatPanel.__name__ = ["com","isartdigital","ruby","ui","CheatPanel"];
com_isartdigital_ruby_ui_CheatPanel.getInstance = function() {
	if(com_isartdigital_ruby_ui_CheatPanel.instance == null) {
		com_isartdigital_ruby_ui_CheatPanel.instance = new com_isartdigital_ruby_ui_CheatPanel();
	}
	return com_isartdigital_ruby_ui_CheatPanel.instance;
};
com_isartdigital_ruby_ui_CheatPanel.prototype = {
	init: function() {
		if(com_isartdigital_utils_Config.get_debug() && com_isartdigital_utils_Config.get_data().cheat && !com_isartdigital_utils_system_DeviceCapabilities.get_isCocoonJS()) {
			this.gui = new dat.gui.GUI();
		}
	}
	,ingame: function() {
		if(this.gui == null) {
			return;
		}
		this.gui.add(com_isartdigital_ruby_game_sprites_Template.getInstance(),"x",-1000,1000).listen();
		this.gui.add(com_isartdigital_ruby_game_sprites_Template.getInstance(),"y",-500,500).listen();
	}
	,clear: function() {
		if(this.gui == null) {
			return;
		}
		this.gui.destroy();
		this.init();
	}
	,destroy: function() {
		com_isartdigital_ruby_ui_CheatPanel.instance = null;
	}
	,__class__: com_isartdigital_ruby_ui_CheatPanel
};
var com_isartdigital_utils_ui_UIComponent = function(pID) {
	this.modal = true;
	this.modalImage = "assets/alpha_bg.png";
	this.positionables = [];
	com_isartdigital_utils_game_GameObject.call(this);
	if(pID == null) {
		this.componentName = Type.getClassName(js_Boot.getClass(this));
		this.componentName = this.componentName.substring(this.componentName.lastIndexOf(".") + 1);
	} else {
		this.componentName = pID;
	}
};
$hxClasses["com.isartdigital.utils.ui.UIComponent"] = com_isartdigital_utils_ui_UIComponent;
com_isartdigital_utils_ui_UIComponent.__name__ = ["com","isartdigital","utils","ui","UIComponent"];
com_isartdigital_utils_ui_UIComponent.__super__ = com_isartdigital_utils_game_GameObject;
com_isartdigital_utils_ui_UIComponent.prototype = $extend(com_isartdigital_utils_game_GameObject.prototype,{
	set_modalImage: function(pImage) {
		this.modalImage = pImage;
		if(this.modalZone != null) {
			this.modalZone.texture = PIXI.Texture.fromImage(this.modalImage);
		}
		return this.modalImage;
	}
	,build: function(pFrame) {
		if(pFrame == null) {
			pFrame = 0;
		}
		var lItems = com_isartdigital_utils_ui_smart_UIBuilder.build(this.componentName,pFrame);
		var _g = 0;
		while(_g < lItems.length) {
			var lItem = lItems[_g];
			++_g;
			this.addChild(lItem.item);
			if(lItem.align != "") {
				this.positionables.push(lItem);
			}
		}
	}
	,open: function() {
		if(this.isOpened) {
			return;
		}
		this.isOpened = true;
		this.set_modal(this.modal);
		com_isartdigital_utils_game_GameStage.getInstance().on("resize",$bind(this,this.onResize));
		this.onResize();
	}
	,set_modal: function(pModal) {
		this.modal = pModal;
		if(this.modal) {
			if(this.modalZone == null) {
				this.modalZone = new PIXI.Sprite(PIXI.Texture.fromImage(com_isartdigital_utils_Config.url(this.modalImage)));
				this.modalZone.interactive = true;
				this.modalZone.on("click",$bind(this,this.stopPropagation));
				this.modalZone.on("tap",$bind(this,this.stopPropagation));
				this.positionables.unshift({ item : this.modalZone, align : "fitScreen", offsetX : 0, offsetY : 0});
			}
			if(this.parent != null) {
				this.parent.addChildAt(this.modalZone,this.parent.getChildIndex(this));
			}
		} else if(this.modalZone != null) {
			if(this.modalZone.parent != null) {
				this.modalZone.parent.removeChild(this.modalZone);
			}
			this.modalZone.off("click",$bind(this,this.stopPropagation));
			this.modalZone.off("tap",$bind(this,this.stopPropagation));
			this.modalZone = null;
			if(this.positionables[0].item == this.modalZone) {
				this.positionables.shift();
			}
		}
		return this.modal;
	}
	,stopPropagation: function(pEvent) {
	}
	,close: function() {
		if(!this.isOpened) {
			return;
		}
		this.isOpened = false;
		this.set_modal(false);
		this.destroy();
	}
	,onResize: function(pEvent) {
		var _g = 0;
		var _g1 = this.positionables;
		while(_g < _g1.length) {
			var lObj = _g1[_g];
			++_g;
			if(lObj.update) {
				if(lObj.align == "top" || lObj.align == "topLeft" || lObj.align == "topRight") {
					lObj.offsetY = this.parent.y + lObj.item.y;
				} else if(lObj.align == "bottom" || lObj.align == "bottomLeft" || lObj.align == "bottomRight") {
					lObj.offsetY = com_isartdigital_utils_game_GameStage.getInstance().get_safeZone().height - this.parent.y - lObj.item.y;
				}
				if(lObj.align == "left" || lObj.align == "topLeft" || lObj.align == "bottomLeft") {
					lObj.offsetX = this.parent.x + lObj.item.x;
				} else if(lObj.align == "right" || lObj.align == "topRight" || lObj.align == "bottomRight") {
					lObj.offsetX = com_isartdigital_utils_game_GameStage.getInstance().get_safeZone().width - this.parent.x - lObj.item.x;
				}
				lObj.update = false;
			}
			com_isartdigital_utils_ui_UIPosition.setPosition(lObj.item,lObj.align,lObj.offsetX,lObj.offsetY);
		}
	}
	,destroy: function() {
		this.close();
		com_isartdigital_utils_game_GameStage.getInstance().off("resize",$bind(this,this.onResize));
		com_isartdigital_utils_game_GameObject.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_utils_ui_UIComponent
});
var com_isartdigital_utils_ui_Screen = function(pID) {
	com_isartdigital_utils_ui_UIComponent.call(this,pID);
	this.set_modalImage("assets/black_bg.png");
};
$hxClasses["com.isartdigital.utils.ui.Screen"] = com_isartdigital_utils_ui_Screen;
com_isartdigital_utils_ui_Screen.__name__ = ["com","isartdigital","utils","ui","Screen"];
com_isartdigital_utils_ui_Screen.__super__ = com_isartdigital_utils_ui_UIComponent;
com_isartdigital_utils_ui_Screen.prototype = $extend(com_isartdigital_utils_ui_UIComponent.prototype,{
	__class__: com_isartdigital_utils_ui_Screen
});
var com_isartdigital_ruby_ui_GraphicLoader = function() {
	com_isartdigital_utils_ui_Screen.call(this);
	var lBg = new PIXI.Sprite(PIXI.Texture.fromImage(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_assetsPath() + "preload_bg.png")));
	lBg.anchor.set(0.5,0.5);
	this.addChild(lBg);
	this.loaderBar = new PIXI.Sprite(PIXI.Texture.fromImage(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_assetsPath() + "preload.png")));
	this.loaderBar.anchor.y = 0.5;
	this.loaderBar.x = -this.loaderBar.width / 2;
	this.addChild(this.loaderBar);
	this.loaderBar.scale.x = 0;
};
$hxClasses["com.isartdigital.ruby.ui.GraphicLoader"] = com_isartdigital_ruby_ui_GraphicLoader;
com_isartdigital_ruby_ui_GraphicLoader.__name__ = ["com","isartdigital","ruby","ui","GraphicLoader"];
com_isartdigital_ruby_ui_GraphicLoader.getInstance = function() {
	if(com_isartdigital_ruby_ui_GraphicLoader.instance == null) {
		com_isartdigital_ruby_ui_GraphicLoader.instance = new com_isartdigital_ruby_ui_GraphicLoader();
	}
	return com_isartdigital_ruby_ui_GraphicLoader.instance;
};
com_isartdigital_ruby_ui_GraphicLoader.__super__ = com_isartdigital_utils_ui_Screen;
com_isartdigital_ruby_ui_GraphicLoader.prototype = $extend(com_isartdigital_utils_ui_Screen.prototype,{
	update: function(pProgress) {
		this.loaderBar.scale.x = pProgress;
	}
	,destroy: function() {
		com_isartdigital_ruby_ui_GraphicLoader.instance = null;
		com_isartdigital_utils_ui_Screen.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_ruby_ui_GraphicLoader
});
var com_isartdigital_ruby_ui_UIManager = function() {
	this.popins = [];
};
$hxClasses["com.isartdigital.ruby.ui.UIManager"] = com_isartdigital_ruby_ui_UIManager;
com_isartdigital_ruby_ui_UIManager.__name__ = ["com","isartdigital","ruby","ui","UIManager"];
com_isartdigital_ruby_ui_UIManager.getInstance = function() {
	if(com_isartdigital_ruby_ui_UIManager.instance == null) {
		com_isartdigital_ruby_ui_UIManager.instance = new com_isartdigital_ruby_ui_UIManager();
	}
	return com_isartdigital_ruby_ui_UIManager.instance;
};
com_isartdigital_ruby_ui_UIManager.prototype = {
	openScreen: function(pScreen) {
		this.closeScreens();
		com_isartdigital_utils_game_GameStage.getInstance().getScreensContainer().addChild(pScreen);
		pScreen.open();
	}
	,closeScreens: function() {
		var lContainer = com_isartdigital_utils_game_GameStage.getInstance().getScreensContainer();
		while(lContainer.children.length > 0) {
			var lCurrent = js_Boot.__cast(lContainer.getChildAt(lContainer.children.length - 1) , com_isartdigital_utils_ui_Screen);
			lCurrent.interactive = false;
			lContainer.removeChild(lCurrent);
			lCurrent.close();
		}
	}
	,openPopin: function(pPopin) {
		this.popins.push(pPopin);
		com_isartdigital_utils_game_GameStage.getInstance().getPopinsContainer().addChild(pPopin);
		pPopin.open();
	}
	,closeCurrentPopin: function() {
		if(this.popins.length == 0) {
			return;
		}
		var lCurrent = this.popins.pop();
		lCurrent.interactive = false;
		com_isartdigital_utils_game_GameStage.getInstance().getPopinsContainer().removeChild(lCurrent);
		lCurrent.close();
	}
	,openHud: function() {
		com_isartdigital_utils_game_GameStage.getInstance().getHudContainer().addChild(com_isartdigital_ruby_ui_hud_Hud.getInstance());
		com_isartdigital_ruby_ui_hud_Hud.getInstance().open();
	}
	,closeHud: function() {
		com_isartdigital_utils_game_GameStage.getInstance().getHudContainer().removeChild(com_isartdigital_ruby_ui_hud_Hud.getInstance());
		com_isartdigital_ruby_ui_hud_Hud.getInstance().close();
	}
	,startGame: function() {
		this.closeScreens();
		this.openHud();
	}
	,destroy: function() {
		com_isartdigital_ruby_ui_UIManager.instance = null;
	}
	,__class__: com_isartdigital_ruby_ui_UIManager
};
var com_isartdigital_ruby_ui_hud_Hud = function() {
	com_isartdigital_utils_ui_Screen.call(this);
	this.set_modal(false);
	this.hudTopLeft = new PIXI.Sprite(PIXI.Texture.fromImage(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_assetsPath() + "HudLeft.png")));
	this.hudBottomLeft = new PIXI.Container();
	var lTxt = new PIXI.Text((com_isartdigital_utils_system_DeviceCapabilities.get_system() == "Desktop"?"Click":"Tap") + " to move",{ font : "80px MyFont", fill : "#FFFFFF", align : "left"});
	lTxt.position.set(20,-220);
	this.hudBottomLeft.addChild(lTxt);
	var lTxt2 = new PIXI.Text("or use cheat panel",{ font : "100px MyOtherFont", fill : "#000000", align : "left"});
	lTxt2.position.set(20,-120);
	this.hudBottomLeft.addChild(lTxt2);
	this.addChild(this.hudTopLeft);
	this.addChild(this.hudBottomLeft);
	this.positionables.push({ item : this.hudTopLeft, align : "topLeft", offsetX : 0, offsetY : 0});
	this.positionables.push({ item : this.hudBottomLeft, align : "bottomLeft", offsetX : 0, offsetY : 0});
};
$hxClasses["com.isartdigital.ruby.ui.hud.Hud"] = com_isartdigital_ruby_ui_hud_Hud;
com_isartdigital_ruby_ui_hud_Hud.__name__ = ["com","isartdigital","ruby","ui","hud","Hud"];
com_isartdigital_ruby_ui_hud_Hud.getInstance = function() {
	if(com_isartdigital_ruby_ui_hud_Hud.instance == null) {
		com_isartdigital_ruby_ui_hud_Hud.instance = new com_isartdigital_ruby_ui_hud_Hud();
	}
	return com_isartdigital_ruby_ui_hud_Hud.instance;
};
com_isartdigital_ruby_ui_hud_Hud.__super__ = com_isartdigital_utils_ui_Screen;
com_isartdigital_ruby_ui_hud_Hud.prototype = $extend(com_isartdigital_utils_ui_Screen.prototype,{
	destroy: function() {
		com_isartdigital_ruby_ui_hud_Hud.instance = null;
		com_isartdigital_utils_ui_Screen.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_ruby_ui_hud_Hud
});
var com_isartdigital_utils_ui_Popin = function(pID) {
	com_isartdigital_utils_ui_UIComponent.call(this,pID);
};
$hxClasses["com.isartdigital.utils.ui.Popin"] = com_isartdigital_utils_ui_Popin;
com_isartdigital_utils_ui_Popin.__name__ = ["com","isartdigital","utils","ui","Popin"];
com_isartdigital_utils_ui_Popin.__super__ = com_isartdigital_utils_ui_UIComponent;
com_isartdigital_utils_ui_Popin.prototype = $extend(com_isartdigital_utils_ui_UIComponent.prototype,{
	__class__: com_isartdigital_utils_ui_Popin
});
var com_isartdigital_ruby_ui_popin_Confirm = function() {
	com_isartdigital_utils_ui_Popin.call(this);
	this.background = new PIXI.Sprite(PIXI.Texture.fromImage(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_assetsPath() + "Confirm.png")));
	this.background.anchor.set(0.5,0.5);
	this.addChild(this.background);
	this.openTween = TweenLite.from(this,0.5,{ y : 200, alpha : 0, onComplete : $bind(this,this.openingComplete)});
};
$hxClasses["com.isartdigital.ruby.ui.popin.Confirm"] = com_isartdigital_ruby_ui_popin_Confirm;
com_isartdigital_ruby_ui_popin_Confirm.__name__ = ["com","isartdigital","ruby","ui","popin","Confirm"];
com_isartdigital_ruby_ui_popin_Confirm.getInstance = function() {
	if(com_isartdigital_ruby_ui_popin_Confirm.instance == null) {
		com_isartdigital_ruby_ui_popin_Confirm.instance = new com_isartdigital_ruby_ui_popin_Confirm();
	}
	return com_isartdigital_ruby_ui_popin_Confirm.instance;
};
com_isartdigital_ruby_ui_popin_Confirm.__super__ = com_isartdigital_utils_ui_Popin;
com_isartdigital_ruby_ui_popin_Confirm.prototype = $extend(com_isartdigital_utils_ui_Popin.prototype,{
	openingComplete: function() {
		this.interactive = true;
		this.buttonMode = true;
		this.once("click",$bind(this,this.onClick));
		this.once("tap",$bind(this,this.onClick));
	}
	,onClick: function(pEvent) {
		com_isartdigital_utils_sounds_SoundManager.getSound("click").play();
		com_isartdigital_ruby_ui_UIManager.getInstance().closeCurrentPopin();
		com_isartdigital_ruby_game_GameManager.getInstance().start();
	}
	,destroy: function() {
		com_isartdigital_ruby_ui_popin_Confirm.instance = null;
		com_isartdigital_utils_ui_Popin.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_ruby_ui_popin_Confirm
});
var com_isartdigital_ruby_ui_screens_TitleCard = function() {
	com_isartdigital_utils_ui_Screen.call(this);
	this.background = new PIXI.Sprite(PIXI.Texture.fromImage(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_assetsPath() + "TitleCard_bg.png")));
	this.background.anchor.set(0.5,0.5);
	this.addChild(this.background);
	this.interactive = true;
	this.buttonMode = true;
	this.once("click",$bind(this,this.onClick));
	this.once("tap",$bind(this,this.onClick));
};
$hxClasses["com.isartdigital.ruby.ui.screens.TitleCard"] = com_isartdigital_ruby_ui_screens_TitleCard;
com_isartdigital_ruby_ui_screens_TitleCard.__name__ = ["com","isartdigital","ruby","ui","screens","TitleCard"];
com_isartdigital_ruby_ui_screens_TitleCard.getInstance = function() {
	if(com_isartdigital_ruby_ui_screens_TitleCard.instance == null) {
		com_isartdigital_ruby_ui_screens_TitleCard.instance = new com_isartdigital_ruby_ui_screens_TitleCard();
	}
	return com_isartdigital_ruby_ui_screens_TitleCard.instance;
};
com_isartdigital_ruby_ui_screens_TitleCard.__super__ = com_isartdigital_utils_ui_Screen;
com_isartdigital_ruby_ui_screens_TitleCard.prototype = $extend(com_isartdigital_utils_ui_Screen.prototype,{
	onClick: function(pEvent) {
		com_isartdigital_utils_sounds_SoundManager.getSound("click").play();
		com_isartdigital_ruby_ui_UIManager.getInstance().openPopin(com_isartdigital_ruby_ui_popin_Confirm.getInstance());
	}
	,destroy: function() {
		com_isartdigital_ruby_ui_screens_TitleCard.instance = null;
		com_isartdigital_utils_ui_Screen.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_ruby_ui_screens_TitleCard
});
var com_isartdigital_utils_Config = function() { };
$hxClasses["com.isartdigital.utils.Config"] = com_isartdigital_utils_Config;
com_isartdigital_utils_Config.__name__ = ["com","isartdigital","utils","Config"];
com_isartdigital_utils_Config.init = function(pConfig) {
	var _g = 0;
	var _g1 = Reflect.fields(pConfig);
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		com_isartdigital_utils_Config._data[i] = Reflect.field(pConfig,i);
	}
	if(com_isartdigital_utils_Config._data.version == null || com_isartdigital_utils_Config._data.version == "") {
		com_isartdigital_utils_Config._data.version = "0.0.0";
	}
	if(com_isartdigital_utils_Config._data.gameName == null) {
		com_isartdigital_utils_Config._data.gameName = "";
	}
	var lStorage = js_Browser.getLocalStorage();
	var lVersion = lStorage.getItem(com_isartdigital_utils_Config.get_gameName()) == null?null:JSON.parse(lStorage.getItem(com_isartdigital_utils_Config.get_gameName())).version;
	if(lVersion != null) {
		com_isartdigital_utils_Config.cache = com_isartdigital_utils_Config.get_version() == lVersion;
	}
	lStorage.setItem(com_isartdigital_utils_Config.get_gameName(),JSON.stringify({ version : com_isartdigital_utils_Config.get_version()}));
	if(com_isartdigital_utils_Config._data.language == null || com_isartdigital_utils_Config._data.language == "") {
		com_isartdigital_utils_Config._data.language = HxOverrides.substr(window.navigator.language,0,2);
	}
	if(com_isartdigital_utils_Config._data.languages == "" || com_isartdigital_utils_Config._data.languages == []) {
		com_isartdigital_utils_Config._data.languages.push(com_isartdigital_utils_Config._data.language);
	}
	if(com_isartdigital_utils_Config._data.debug == null || com_isartdigital_utils_Config._data.debug == "") {
		com_isartdigital_utils_Config._data.debug = false;
	}
	if(com_isartdigital_utils_Config._data.fps == null || com_isartdigital_utils_Config._data.fps == "") {
		com_isartdigital_utils_Config._data.fps = false;
	}
	if(com_isartdigital_utils_Config._data.qrcode == null || com_isartdigital_utils_Config._data.qrcode == "") {
		com_isartdigital_utils_Config._data.qrcode = false;
	}
	if(com_isartdigital_utils_Config._data.langPath == null) {
		com_isartdigital_utils_Config._data.langPath = "";
	}
	if(com_isartdigital_utils_Config._data.txtsPath == null) {
		com_isartdigital_utils_Config._data.txtsPath = "";
	}
	if(com_isartdigital_utils_Config._data.assetsPath == null) {
		com_isartdigital_utils_Config._data.assetsPath = "";
	}
	if(com_isartdigital_utils_Config._data.fontsPath == null) {
		com_isartdigital_utils_Config._data.fontsPath = "";
	}
	if(com_isartdigital_utils_Config._data.soundsPath == null) {
		com_isartdigital_utils_Config._data.soundsPath = "";
	}
};
com_isartdigital_utils_Config.url = function(pPath) {
	return pPath + "?" + com_isartdigital_utils_Config.get_version();
};
com_isartdigital_utils_Config.get_data = function() {
	return com_isartdigital_utils_Config._data;
};
com_isartdigital_utils_Config.get_gameName = function() {
	return com_isartdigital_utils_Config._data.gameName;
};
com_isartdigital_utils_Config.get_version = function() {
	return com_isartdigital_utils_Config._data.version;
};
com_isartdigital_utils_Config.get_language = function() {
	return com_isartdigital_utils_Config.get_data().language;
};
com_isartdigital_utils_Config.get_languages = function() {
	return com_isartdigital_utils_Config.get_data().languages;
};
com_isartdigital_utils_Config.get_debug = function() {
	return com_isartdigital_utils_Config.get_data().debug;
};
com_isartdigital_utils_Config.get_fps = function() {
	return com_isartdigital_utils_Config.get_data().fps;
};
com_isartdigital_utils_Config.get_qrcode = function() {
	return com_isartdigital_utils_Config.get_data().qrcode;
};
com_isartdigital_utils_Config.get_langPath = function() {
	return com_isartdigital_utils_Config._data.langPath;
};
com_isartdigital_utils_Config.get_txtsPath = function() {
	return com_isartdigital_utils_Config._data.txtsPath;
};
com_isartdigital_utils_Config.get_assetsPath = function() {
	return com_isartdigital_utils_Config._data.assetsPath;
};
com_isartdigital_utils_Config.get_fontsPath = function() {
	return com_isartdigital_utils_Config._data.fontsPath;
};
com_isartdigital_utils_Config.get_soundsPath = function() {
	return com_isartdigital_utils_Config._data.soundsPath;
};
var com_isartdigital_utils_Debug = function() {
};
$hxClasses["com.isartdigital.utils.Debug"] = com_isartdigital_utils_Debug;
com_isartdigital_utils_Debug.__name__ = ["com","isartdigital","utils","Debug"];
com_isartdigital_utils_Debug.getInstance = function() {
	if(com_isartdigital_utils_Debug.instance == null) {
		com_isartdigital_utils_Debug.instance = new com_isartdigital_utils_Debug();
	}
	return com_isartdigital_utils_Debug.instance;
};
com_isartdigital_utils_Debug.error = function(pArg) {
	window.console.error(pArg);
};
com_isartdigital_utils_Debug.warn = function(pArg) {
	window.console.warn(pArg);
};
com_isartdigital_utils_Debug.table = function(pArg) {
	window.console.table(pArg);
};
com_isartdigital_utils_Debug.info = function(pArg) {
	window.console.info(pArg);
};
com_isartdigital_utils_Debug.prototype = {
	init: function() {
		if(com_isartdigital_utils_Config.get_fps()) {
			this.fps = new Perf("TL");
		}
		if(com_isartdigital_utils_Config.get_qrcode() && !com_isartdigital_utils_system_DeviceCapabilities.get_isCocoonJS()) {
			var lQr = new Image();
			lQr.style.position = "absolute";
			lQr.style.right = "0px";
			lQr.style.bottom = "0px";
			var lSize = 0.35 * com_isartdigital_utils_system_DeviceCapabilities.getSizeFactor() | 0;
			lQr.src = "https://chart.googleapis.com/chart?chs=" + lSize + "x" + lSize + "&cht=qr&chl=" + window.location.href + "&choe=UTF-8";
			window.document.body.appendChild(lQr);
		}
	}
	,destroy: function() {
	}
	,__class__: com_isartdigital_utils_Debug
};
var com_isartdigital_utils_events_EventType = function() { };
$hxClasses["com.isartdigital.utils.events.EventType"] = com_isartdigital_utils_events_EventType;
com_isartdigital_utils_events_EventType.__name__ = ["com","isartdigital","utils","events","EventType"];
var com_isartdigital_utils_events_LoadEventType = function() { };
$hxClasses["com.isartdigital.utils.events.LoadEventType"] = com_isartdigital_utils_events_LoadEventType;
com_isartdigital_utils_events_LoadEventType.__name__ = ["com","isartdigital","utils","events","LoadEventType"];
com_isartdigital_utils_events_LoadEventType.__super__ = com_isartdigital_utils_events_EventType;
com_isartdigital_utils_events_LoadEventType.prototype = $extend(com_isartdigital_utils_events_EventType.prototype,{
	__class__: com_isartdigital_utils_events_LoadEventType
});
var com_isartdigital_utils_events_MouseEventType = function() { };
$hxClasses["com.isartdigital.utils.events.MouseEventType"] = com_isartdigital_utils_events_MouseEventType;
com_isartdigital_utils_events_MouseEventType.__name__ = ["com","isartdigital","utils","events","MouseEventType"];
com_isartdigital_utils_events_MouseEventType.__super__ = com_isartdigital_utils_events_EventType;
com_isartdigital_utils_events_MouseEventType.prototype = $extend(com_isartdigital_utils_events_EventType.prototype,{
	__class__: com_isartdigital_utils_events_MouseEventType
});
var com_isartdigital_utils_events_TouchEventType = function() { };
$hxClasses["com.isartdigital.utils.events.TouchEventType"] = com_isartdigital_utils_events_TouchEventType;
com_isartdigital_utils_events_TouchEventType.__name__ = ["com","isartdigital","utils","events","TouchEventType"];
com_isartdigital_utils_events_TouchEventType.__super__ = com_isartdigital_utils_events_EventType;
com_isartdigital_utils_events_TouchEventType.prototype = $extend(com_isartdigital_utils_events_EventType.prototype,{
	__class__: com_isartdigital_utils_events_TouchEventType
});
var com_isartdigital_utils_game_BoxType = { __ename__ : true, __constructs__ : ["NONE","SIMPLE","MULTIPLE","SELF"] };
com_isartdigital_utils_game_BoxType.NONE = ["NONE",0];
com_isartdigital_utils_game_BoxType.NONE.__enum__ = com_isartdigital_utils_game_BoxType;
com_isartdigital_utils_game_BoxType.SIMPLE = ["SIMPLE",1];
com_isartdigital_utils_game_BoxType.SIMPLE.__enum__ = com_isartdigital_utils_game_BoxType;
com_isartdigital_utils_game_BoxType.MULTIPLE = ["MULTIPLE",2];
com_isartdigital_utils_game_BoxType.MULTIPLE.__enum__ = com_isartdigital_utils_game_BoxType;
com_isartdigital_utils_game_BoxType.SELF = ["SELF",3];
com_isartdigital_utils_game_BoxType.SELF.__enum__ = com_isartdigital_utils_game_BoxType;
var com_isartdigital_utils_game_CollisionManager = function() {
};
$hxClasses["com.isartdigital.utils.game.CollisionManager"] = com_isartdigital_utils_game_CollisionManager;
com_isartdigital_utils_game_CollisionManager.__name__ = ["com","isartdigital","utils","game","CollisionManager"];
com_isartdigital_utils_game_CollisionManager.hitTestObject = function(pObjectA,pObjectB) {
	return com_isartdigital_utils_game_CollisionManager.getIntersection(pObjectA.getBounds(),pObjectB.getBounds());
};
com_isartdigital_utils_game_CollisionManager.hitTestPoint = function(pItem,pGlobalPoint) {
	var lPoint = pItem.toLocal(pGlobalPoint);
	var x = lPoint.x;
	var y = lPoint.y;
	if(pItem.hitArea != null && pItem.hitArea.contains != null) {
		return pItem.hitArea.contains(x,y);
	} else if(js_Boot.__instanceof(pItem,PIXI.Sprite)) {
		var lSprite = js_Boot.__cast(pItem , PIXI.Sprite);
		var lWidth = lSprite.texture.frame.width;
		var lHeight = lSprite.texture.frame.height;
		var lX1 = -lWidth * lSprite.anchor.x;
		var lY1;
		if(x > lX1 && x < lX1 + lWidth) {
			lY1 = -lHeight * lSprite.anchor.y;
			if(y > lY1 && y < lY1 + lHeight) {
				return true;
			}
		}
	} else if(js_Boot.__instanceof(pItem,PIXI.Graphics)) {
		var lGraphicsData = pItem.graphicsData;
		var _g1 = 0;
		var _g = lGraphicsData.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lData = lGraphicsData[i];
			if(!lData.fill) {
				continue;
			}
			if(lData.shape != null && lData.shape.contains(x,y)) {
				return true;
			}
		}
	} else if(js_Boot.__instanceof(pItem,PIXI.Container)) {
		var lContainer = js_Boot.__cast(pItem , PIXI.Container);
		var lLength = lContainer.children.length;
		var _g11 = 0;
		var _g2 = lLength;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(com_isartdigital_utils_game_CollisionManager.hitTestPoint(lContainer.children[i1],pGlobalPoint)) {
				return true;
			}
		}
	}
	return false;
};
com_isartdigital_utils_game_CollisionManager.hasCollision = function(pHitBoxA,pHitBoxB,pPointsA,pPointsB) {
	if(pHitBoxA == null || pHitBoxB == null) {
		return false;
	}
	if(!com_isartdigital_utils_game_CollisionManager.hitTestObject(pHitBoxA,pHitBoxB)) {
		return false;
	}
	if(pPointsA == null && pPointsB == null) {
		return true;
	}
	if(pPointsA != null) {
		return com_isartdigital_utils_game_CollisionManager.testPoints(pPointsA,pHitBoxB);
	}
	if(pPointsB != null) {
		return com_isartdigital_utils_game_CollisionManager.testPoints(pPointsB,pHitBoxA);
	}
	return false;
};
com_isartdigital_utils_game_CollisionManager.getIntersection = function(pRectA,pRectB) {
	return !(pRectB.x > pRectA.x + pRectA.width || pRectB.x + pRectB.width < pRectA.x || pRectB.y > pRectA.y + pRectA.height || pRectB.y + pRectB.height < pRectA.y);
};
com_isartdigital_utils_game_CollisionManager.testPoints = function(pHitPoints,pHitBox) {
	var lLength = pHitPoints.length;
	var _g1 = 0;
	while(_g1 < lLength) if(com_isartdigital_utils_game_CollisionManager.hitTestPoint(pHitBox,pHitPoints[_g1++])) {
		return true;
	}
	return false;
};
com_isartdigital_utils_game_CollisionManager.prototype = {
	__class__: com_isartdigital_utils_game_CollisionManager
};
var com_isartdigital_utils_game_GameStage = function() {
	this._safeZone = new PIXI.Rectangle(0,0,2048,1366);
	this._scaleMode = com_isartdigital_utils_game_GameStageScale.SHOW_ALL;
	this._alignMode = com_isartdigital_utils_game_GameStageAlign.CENTER;
	PIXI.Container.call(this);
	this.gameContainer = new PIXI.Container();
	this.addChild(this.gameContainer);
	this.screensContainer = new PIXI.Container();
	this.addChild(this.screensContainer);
	this.hudContainer = new PIXI.Container();
	this.addChild(this.hudContainer);
	this.popinsContainer = new PIXI.Container();
	this.addChild(this.popinsContainer);
};
$hxClasses["com.isartdigital.utils.game.GameStage"] = com_isartdigital_utils_game_GameStage;
com_isartdigital_utils_game_GameStage.__name__ = ["com","isartdigital","utils","game","GameStage"];
com_isartdigital_utils_game_GameStage.getInstance = function() {
	if(com_isartdigital_utils_game_GameStage.instance == null) {
		com_isartdigital_utils_game_GameStage.instance = new com_isartdigital_utils_game_GameStage();
	}
	return com_isartdigital_utils_game_GameStage.instance;
};
com_isartdigital_utils_game_GameStage.__super__ = PIXI.Container;
com_isartdigital_utils_game_GameStage.prototype = $extend(PIXI.Container.prototype,{
	init: function(pRender,pSafeZoneWidth,pSafeZoneHeight,pCenterGameContainer,pCenterScreensContainer,pCenterPopinContainer,pCenterHudContainer) {
		if(pCenterHudContainer == null) {
			pCenterHudContainer = false;
		}
		if(pCenterPopinContainer == null) {
			pCenterPopinContainer = true;
		}
		if(pCenterScreensContainer == null) {
			pCenterScreensContainer = true;
		}
		if(pCenterGameContainer == null) {
			pCenterGameContainer = false;
		}
		if(pSafeZoneHeight == null) {
			pSafeZoneHeight = 2048;
		}
		if(pSafeZoneWidth == null) {
			pSafeZoneWidth = 2048;
		}
		this._safeZone = new PIXI.Rectangle(0,0,_$UInt_UInt_$Impl_$.toFloat(pSafeZoneWidth),_$UInt_UInt_$Impl_$.toFloat(pSafeZoneHeight));
		if(pCenterGameContainer) {
			this.gameContainer.x = this.get_safeZone().width / 2;
			this.gameContainer.y = this.get_safeZone().height / 2;
		}
		if(pCenterScreensContainer) {
			this.screensContainer.x = this.get_safeZone().width / 2;
			this.screensContainer.y = this.get_safeZone().height / 2;
		}
		if(pCenterPopinContainer) {
			this.popinsContainer.x = this.get_safeZone().width / 2;
			this.popinsContainer.y = this.get_safeZone().height / 2;
		}
		if(pCenterHudContainer) {
			this.hudContainer.x = this.get_safeZone().width / 2;
			this.hudContainer.y = this.get_safeZone().height / 2;
		}
		this._render = pRender;
	}
	,resize: function() {
		var lWidth = com_isartdigital_utils_system_DeviceCapabilities.get_width();
		var lHeight = com_isartdigital_utils_system_DeviceCapabilities.get_height();
		var lRatio = Math.round(10000 * Math.min(_$UInt_UInt_$Impl_$.toFloat(lWidth) / this.get_safeZone().width,_$UInt_UInt_$Impl_$.toFloat(lHeight) / this.get_safeZone().height)) / 10000;
		if(this.get_scaleMode() == com_isartdigital_utils_game_GameStageScale.SHOW_ALL) {
			this.scale.set(lRatio,lRatio);
		} else {
			this.scale.set(com_isartdigital_utils_system_DeviceCapabilities.textureRatio,com_isartdigital_utils_system_DeviceCapabilities.textureRatio);
		}
		if(this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.LEFT || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.TOP_LEFT || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.BOTTOM_LEFT) {
			this.x = 0;
		} else if(this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.RIGHT || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.TOP_RIGHT || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.BOTTOM_RIGHT) {
			this.x = _$UInt_UInt_$Impl_$.toFloat(lWidth) - this.get_safeZone().width * this.scale.x;
		} else {
			this.x = (_$UInt_UInt_$Impl_$.toFloat(lWidth) - this.get_safeZone().width * this.scale.x) / 2;
		}
		if(this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.TOP || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.TOP_LEFT || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.TOP_RIGHT) {
			this.y = 0;
		} else if(this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.BOTTOM || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.BOTTOM_LEFT || this.get_alignMode() == com_isartdigital_utils_game_GameStageAlign.BOTTOM_RIGHT) {
			this.y = _$UInt_UInt_$Impl_$.toFloat(lHeight) - this.get_safeZone().height * this.scale.y;
		} else {
			this.y = (_$UInt_UInt_$Impl_$.toFloat(lHeight) - this.get_safeZone().height * this.scale.y) / 2;
		}
		this.render();
		this.emit("resize",{ width : lWidth, height : lHeight});
	}
	,render: function() {
		if(this._render != null) {
			this._render();
		}
	}
	,get_alignMode: function() {
		return this._alignMode;
	}
	,set_alignMode: function(pAlign) {
		this._alignMode = pAlign;
		this.resize();
		return this._alignMode;
	}
	,get_scaleMode: function() {
		return this._scaleMode;
	}
	,set_scaleMode: function(pScale) {
		this._scaleMode = pScale;
		this.resize();
		return this._scaleMode;
	}
	,get_safeZone: function() {
		return this._safeZone;
	}
	,getGameContainer: function() {
		return this.gameContainer;
	}
	,getScreensContainer: function() {
		return this.screensContainer;
	}
	,getHudContainer: function() {
		return this.hudContainer;
	}
	,getPopinsContainer: function() {
		return this.popinsContainer;
	}
	,destroy: function() {
		com_isartdigital_utils_game_GameStage.instance = null;
		PIXI.Container.prototype.destroy.call(this,true);
	}
	,__class__: com_isartdigital_utils_game_GameStage
});
var com_isartdigital_utils_game_GameStageAlign = { __ename__ : true, __constructs__ : ["TOP","TOP_LEFT","TOP_RIGHT","CENTER","LEFT","RIGHT","BOTTOM","BOTTOM_LEFT","BOTTOM_RIGHT"] };
com_isartdigital_utils_game_GameStageAlign.TOP = ["TOP",0];
com_isartdigital_utils_game_GameStageAlign.TOP.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.TOP_LEFT = ["TOP_LEFT",1];
com_isartdigital_utils_game_GameStageAlign.TOP_LEFT.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.TOP_RIGHT = ["TOP_RIGHT",2];
com_isartdigital_utils_game_GameStageAlign.TOP_RIGHT.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.CENTER = ["CENTER",3];
com_isartdigital_utils_game_GameStageAlign.CENTER.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.LEFT = ["LEFT",4];
com_isartdigital_utils_game_GameStageAlign.LEFT.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.RIGHT = ["RIGHT",5];
com_isartdigital_utils_game_GameStageAlign.RIGHT.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.BOTTOM = ["BOTTOM",6];
com_isartdigital_utils_game_GameStageAlign.BOTTOM.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",7];
com_isartdigital_utils_game_GameStageAlign.BOTTOM_LEFT.__enum__ = com_isartdigital_utils_game_GameStageAlign;
com_isartdigital_utils_game_GameStageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",8];
com_isartdigital_utils_game_GameStageAlign.BOTTOM_RIGHT.__enum__ = com_isartdigital_utils_game_GameStageAlign;
var com_isartdigital_utils_game_GameStageScale = { __ename__ : true, __constructs__ : ["NO_SCALE","SHOW_ALL"] };
com_isartdigital_utils_game_GameStageScale.NO_SCALE = ["NO_SCALE",0];
com_isartdigital_utils_game_GameStageScale.NO_SCALE.__enum__ = com_isartdigital_utils_game_GameStageScale;
com_isartdigital_utils_game_GameStageScale.SHOW_ALL = ["SHOW_ALL",1];
com_isartdigital_utils_game_GameStageScale.SHOW_ALL.__enum__ = com_isartdigital_utils_game_GameStageScale;
var com_isartdigital_utils_game_factory_AnimFactory = function() {
};
$hxClasses["com.isartdigital.utils.game.factory.AnimFactory"] = com_isartdigital_utils_game_factory_AnimFactory;
com_isartdigital_utils_game_factory_AnimFactory.__name__ = ["com","isartdigital","utils","game","factory","AnimFactory"];
com_isartdigital_utils_game_factory_AnimFactory.prototype = {
	getAnim: function() {
		return this.anim;
	}
	,create: function(pID) {
		return null;
	}
	,update: function(pId) {
	}
	,setFrame: function(pAutoPlay,pStart) {
		if(pStart == null) {
			pStart = 0;
		}
		if(pAutoPlay == null) {
			pAutoPlay = true;
		}
	}
	,__class__: com_isartdigital_utils_game_factory_AnimFactory
};
var com_isartdigital_utils_game_factory_FlumpMovieAnimFactory = function() {
	com_isartdigital_utils_game_factory_AnimFactory.call(this);
};
$hxClasses["com.isartdigital.utils.game.factory.FlumpMovieAnimFactory"] = com_isartdigital_utils_game_factory_FlumpMovieAnimFactory;
com_isartdigital_utils_game_factory_FlumpMovieAnimFactory.__name__ = ["com","isartdigital","utils","game","factory","FlumpMovieAnimFactory"];
com_isartdigital_utils_game_factory_FlumpMovieAnimFactory.__super__ = com_isartdigital_utils_game_factory_AnimFactory;
com_isartdigital_utils_game_factory_FlumpMovieAnimFactory.prototype = $extend(com_isartdigital_utils_game_factory_AnimFactory.prototype,{
	getAnim: function() {
		if(this.anim != null) {
			this.anim.parent.removeChild(this.anim);
			this.anim.destroy();
			this.anim = null;
		}
		return com_isartdigital_utils_game_factory_AnimFactory.prototype.getAnim.call(this);
	}
	,create: function(pID) {
		this.anim = new pixi_flump_Movie(pID);
		return this.anim;
	}
	,setFrame: function(pAutoPlay,pStart) {
		if(pStart == null) {
			pStart = 0;
		}
		if(pAutoPlay == null) {
			pAutoPlay = true;
		}
		var lAnim = js_Boot.__cast(this.anim , pixi_flump_Movie);
		if(lAnim.get_totalFrames() > 1) {
			if(pAutoPlay) {
				lAnim.gotoAndPlay(pStart);
			} else {
				lAnim.gotoAndStop(pStart);
			}
		} else if(!pAutoPlay) {
			lAnim.stop();
		}
	}
	,__class__: com_isartdigital_utils_game_factory_FlumpMovieAnimFactory
});
var com_isartdigital_utils_game_factory_FlumpSpriteAnimFactory = function() {
	com_isartdigital_utils_game_factory_AnimFactory.call(this);
};
$hxClasses["com.isartdigital.utils.game.factory.FlumpSpriteAnimFactory"] = com_isartdigital_utils_game_factory_FlumpSpriteAnimFactory;
com_isartdigital_utils_game_factory_FlumpSpriteAnimFactory.__name__ = ["com","isartdigital","utils","game","factory","FlumpSpriteAnimFactory"];
com_isartdigital_utils_game_factory_FlumpSpriteAnimFactory.__super__ = com_isartdigital_utils_game_factory_AnimFactory;
com_isartdigital_utils_game_factory_FlumpSpriteAnimFactory.prototype = $extend(com_isartdigital_utils_game_factory_AnimFactory.prototype,{
	getAnim: function() {
		if(this.anim != null) {
			this.anim.parent.removeChild(this.anim);
			this.anim.destroy();
			this.anim = null;
		}
		return com_isartdigital_utils_game_factory_AnimFactory.prototype.getAnim.call(this);
	}
	,create: function(pID) {
		this.anim = new pixi_flump_Sprite(pID);
		return this.anim;
	}
	,setFrame: function(pAutoPlay,pStart) {
		if(pStart == null) {
			pStart = 0;
		}
		if(pAutoPlay == null) {
			pAutoPlay = true;
		}
	}
	,__class__: com_isartdigital_utils_game_factory_FlumpSpriteAnimFactory
});
var com_isartdigital_utils_game_factory_MovieClipAnimFactory = function() {
	com_isartdigital_utils_game_factory_AnimFactory.call(this);
};
$hxClasses["com.isartdigital.utils.game.factory.MovieClipAnimFactory"] = com_isartdigital_utils_game_factory_MovieClipAnimFactory;
com_isartdigital_utils_game_factory_MovieClipAnimFactory.__name__ = ["com","isartdigital","utils","game","factory","MovieClipAnimFactory"];
com_isartdigital_utils_game_factory_MovieClipAnimFactory.set_textureDigits = function(pDigits) {
	com_isartdigital_utils_game_factory_MovieClipAnimFactory.digits = "";
	var _g1 = 0;
	var _g = pDigits;
	while(_g1 < _g) {
		++_g1;
		com_isartdigital_utils_game_factory_MovieClipAnimFactory.digits += "0";
	}
	return com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits = pDigits;
};
com_isartdigital_utils_game_factory_MovieClipAnimFactory.addTextures = function(pJson) {
	var lFrames = Reflect.field(pJson,"frames");
	if(com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition == null) {
		com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition = new haxe_ds_StringMap();
	}
	if(com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesAnchor == null) {
		com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesAnchor = new haxe_ds_StringMap();
	}
	if(com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache == null) {
		com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache = new haxe_ds_StringMap();
	}
	if(com_isartdigital_utils_game_factory_MovieClipAnimFactory.digits == null) {
		com_isartdigital_utils_game_factory_MovieClipAnimFactory.set_textureDigits(com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits);
	}
	var lID;
	var lNum;
	var _g = 0;
	var _g1 = Reflect.fields(lFrames);
	while(_g < _g1.length) {
		var lName = _g1[_g];
		++_g;
		lID = lName.split(".")[0];
		lNum = Std.parseInt(HxOverrides.substr(lID,-1 * com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits,null));
		if(lNum != null) {
			lID = HxOverrides.substr(lID,0,lID.length - com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits);
		}
		var _this = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition;
		if((__map_reserved[lID] != null?_this.getReserved(lID):_this.h[lID]) == null) {
			var v = lNum == null?1:lNum;
			var _this1 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition;
			if(__map_reserved[lID] != null) {
				_this1.setReserved(lID,v);
			} else {
				_this1.h[lID] = v;
			}
		} else {
			var _this2 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition;
			if(lNum > (__map_reserved[lID] != null?_this2.getReserved(lID):_this2.h[lID])) {
				var _this3 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition;
				if(__map_reserved[lID] != null) {
					_this3.setReserved(lID,lNum);
				} else {
					_this3.h[lID] = lNum;
				}
			}
		}
		var _this4 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesAnchor;
		if((__map_reserved[lID] != null?_this4.getReserved(lID):_this4.h[lID]) == null) {
			var v1 = Reflect.field(lFrames,lName).pivot;
			var _this5 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesAnchor;
			if(__map_reserved[lID] != null) {
				_this5.setReserved(lID,v1);
			} else {
				_this5.h[lID] = v1;
			}
		}
	}
};
com_isartdigital_utils_game_factory_MovieClipAnimFactory.clearTextures = function(pJson) {
	var lFrames = Reflect.field(pJson,"frames");
	if(com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition == null) {
		return;
	}
	var lNum;
	var _g = 0;
	var _g1 = Reflect.fields(lFrames);
	while(_g < _g1.length) {
		var lID = _g1[_g];
		++_g;
		lID = lID.split(".")[0];
		lNum = Std.parseInt(HxOverrides.substr(lID,-1 * com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits,null));
		if(lNum != null) {
			lID = HxOverrides.substr(lID,0,lID.length - com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits);
		}
		var _this = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition;
		if(__map_reserved[lID] != null) {
			_this.setReserved(lID,null);
		} else {
			_this.h[lID] = null;
		}
		var _this1 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesAnchor;
		if(__map_reserved[lID] != null) {
			_this1.setReserved(lID,null);
		} else {
			_this1.h[lID] = null;
		}
		var _this2 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache;
		if(__map_reserved[lID] != null) {
			_this2.setReserved(lID,null);
		} else {
			_this2.h[lID] = null;
		}
	}
};
com_isartdigital_utils_game_factory_MovieClipAnimFactory.__super__ = com_isartdigital_utils_game_factory_AnimFactory;
com_isartdigital_utils_game_factory_MovieClipAnimFactory.prototype = $extend(com_isartdigital_utils_game_factory_AnimFactory.prototype,{
	create: function(pID) {
		this.anim = new PIXI.extras.MovieClip(this.getTextures(pID));
		var _this = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesAnchor;
		(js_Boot.__cast(this.anim , PIXI.extras.MovieClip)).anchor = __map_reserved[pID] != null?_this.getReserved(pID):_this.h[pID];
		return this.anim;
	}
	,update: function(pID) {
		var lAnim = js_Boot.__cast(this.anim , PIXI.extras.MovieClip);
		lAnim.textures = this.getTextures(pID);
		var _this = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesAnchor;
		lAnim.anchor = __map_reserved[pID] != null?_this.getReserved(pID):_this.h[pID];
	}
	,setFrame: function(pAutoPlay,pStart) {
		if(pStart == null) {
			pStart = 0;
		}
		if(pAutoPlay == null) {
			pAutoPlay = true;
		}
		var lAnim = js_Boot.__cast(this.anim , PIXI.extras.MovieClip);
		lAnim.gotoAndStop(pStart);
		if(pAutoPlay) {
			lAnim.play();
		}
	}
	,getTextures: function(pID) {
		var _this = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache;
		if((__map_reserved[pID] != null?_this.getReserved(pID):_this.h[pID]) == null) {
			var _this1 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesDefinition;
			var lFrames = __map_reserved[pID] != null?_this1.getReserved(pID):_this1.h[pID];
			if(lFrames == 1) {
				var v = [PIXI.Texture.fromFrame(pID + ".png")];
				var _this2 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache;
				if(__map_reserved[pID] != null) {
					_this2.setReserved(pID,v);
				} else {
					_this2.h[pID] = v;
				}
			} else {
				var v1 = [];
				var _this3 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache;
				if(__map_reserved[pID] != null) {
					_this3.setReserved(pID,v1);
				} else {
					_this3.h[pID] = v1;
				}
				var _g1 = 1;
				var _g = lFrames + 1;
				while(_g1 < _g) {
					var i = _g1++;
					var _this4 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache;
					(__map_reserved[pID] != null?_this4.getReserved(pID):_this4.h[pID]).push(PIXI.Texture.fromFrame(pID + HxOverrides.substr(com_isartdigital_utils_game_factory_MovieClipAnimFactory.digits + i,-1 * com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits,null) + ".png"));
				}
			}
		}
		var _this5 = com_isartdigital_utils_game_factory_MovieClipAnimFactory.texturesCache;
		return __map_reserved[pID] != null?_this5.getReserved(pID):_this5.h[pID];
	}
	,__class__: com_isartdigital_utils_game_factory_MovieClipAnimFactory
});
var com_isartdigital_utils_loader_GameLoader = function() {
	this.soundsList = [];
	this.soundsSpecs = new haxe_ds_StringMap();
	PIXI.loaders.Loader.call(this);
	this.once("complete",$bind(this,this.onComplete));
};
$hxClasses["com.isartdigital.utils.loader.GameLoader"] = com_isartdigital_utils_loader_GameLoader;
com_isartdigital_utils_loader_GameLoader.__name__ = ["com","isartdigital","utils","loader","GameLoader"];
com_isartdigital_utils_loader_GameLoader.getContent = function(pFile) {
	var key = com_isartdigital_utils_Config.get_txtsPath() + pFile;
	var _this = com_isartdigital_utils_loader_GameLoader.txtLoaded;
	if(__map_reserved[key] != null) {
		return _this.getReserved(key);
	} else {
		return _this.h[key];
	}
};
com_isartdigital_utils_loader_GameLoader.__super__ = PIXI.loaders.Loader;
com_isartdigital_utils_loader_GameLoader.prototype = $extend(PIXI.loaders.Loader.prototype,{
	addTxtFile: function(pUrl) {
		this.add(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_txtsPath() + pUrl));
	}
	,addAssetFile: function(pUrl) {
		this.add(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_assetsPath() + pUrl));
	}
	,addSoundFile: function(pUrl) {
		var lUrl = com_isartdigital_utils_Config.get_soundsPath() + pUrl;
		this.soundsList.push(lUrl);
		this.add(com_isartdigital_utils_Config.url(lUrl));
	}
	,addFontFile: function(pUrl) {
		if(com_isartdigital_utils_system_DeviceCapabilities.get_isCocoonJS()) {
			return;
		}
		this.add(com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_fontsPath() + pUrl));
	}
	,parseData: function(pResource,pNext) {
		console.log(pResource.url + " loaded");
		var lUrl = pResource.url.split("?")[0];
		if(lUrl.indexOf(".css") > 0) {
			var lData = pResource.data.split(";");
			var lFamilies = [];
			var lReg = new EReg("font-family:\\s?(.*)","");
			var _g1 = 0;
			var _g = lData.length;
			while(_g1 < _g) if(lReg.match(lData[_g1++])) {
				lFamilies.push(lReg.matched(1));
			}
			WebFont.load({ custom : { families : lFamilies, urls : [com_isartdigital_utils_Config.get_fontsPath() + "fonts.css"]}, active : pNext});
			return;
		}
		if(pResource.isJson) {
			var v = pResource.data;
			var _this = com_isartdigital_utils_loader_GameLoader.txtLoaded;
			if(__map_reserved[lUrl] != null) {
				_this.setReserved(lUrl,v);
			} else {
				_this.h[lUrl] = v;
			}
			if(HxOverrides.substr(lUrl,-12,12) == "library.json" && Object.prototype.hasOwnProperty.call(pResource.data,"md5") && Object.prototype.hasOwnProperty.call(pResource.data,"movies") && Object.prototype.hasOwnProperty.call(pResource.data,"textureGroups") && Object.prototype.hasOwnProperty.call(pResource.data,"frameRate")) {
				(pixi_flump_Parser.parse(1,com_isartdigital_utils_Config.cache))(pResource,pNext);
				return;
			} else if(this.soundsList.length > 0) {
				var lData1;
				var _g11 = 0;
				var _g2 = this.soundsList.length;
				while(_g11 < _g2) {
					var i = _g11++;
					if(lUrl == this.soundsList[i]) {
						this.soundsList.splice(i,1);
						lData1 = pResource.data;
						if(com_isartdigital_utils_system_DeviceCapabilities.get_isCocoonJS()) {
							if(lData1.extensions.indexOf("ogg") == -1) {
								throw new js__$Boot_HaxeError("CocoonJs needs ogg sounds. No sound will be played in the application.");
							} else {
								lData1.extensions = ["ogg"];
							}
						}
						var _g3 = 0;
						var _g21 = lData1.extensions.length;
						while(_g3 < _g21) if(Howler.codecs(lData1.extensions[_g3++])) {
							this.addSounds(lData1.fxs,false,lData1.extensions,lData1.extensions[i]);
							this.addSounds(lData1.musics,true,lData1.extensions,lData1.extensions[i]);
							break;
						}
						break;
					}
				}
			}
		} else if(pResource.isXml) {
			var v1 = Xml.parse(new XMLSerializer().serializeToString(pResource.data));
			var _this1 = com_isartdigital_utils_loader_GameLoader.txtLoaded;
			if(__map_reserved[lUrl] != null) {
				_this1.setReserved(lUrl,v1);
			} else {
				_this1.h[lUrl] = v1;
			}
		}
		pNext();
	}
	,manageCache: function(pResource,pNext) {
		if(pResource.name != pResource.url) {
			pResource.url = com_isartdigital_utils_Config.url(pResource.url);
		}
		pNext();
	}
	,addSounds: function(pList,pLoop,pExtensions,pCodec) {
		var lUrl;
		var _g = 0;
		var _g1 = Reflect.fields(pList);
		while(_g < _g1.length) {
			var lID = _g1[_g];
			++_g;
			lUrl = com_isartdigital_utils_Config.url(com_isartdigital_utils_Config.get_soundsPath() + lID + "." + pCodec);
			var value = { src : [lUrl], volume : Reflect.field(pList,lID) / 100, loop : pLoop};
			var _this = this.soundsSpecs;
			if(__map_reserved[lID] != null) {
				_this.setReserved(lID,value);
			} else {
				_this.h[lID] = value;
			}
			this.add(lUrl);
		}
	}
	,load: function(cb) {
		this.before($bind(this,this.manageCache));
		this.after($bind(this,this.parseData));
		return PIXI.loaders.Loader.prototype.load.call(this);
	}
	,onComplete: function() {
		var tmp = this.soundsSpecs.keys();
		while(tmp.hasNext()) {
			var lID = tmp.next();
			var _this = this.soundsSpecs;
			com_isartdigital_utils_sounds_SoundManager.addSound(lID,new Howl(__map_reserved[lID] != null?_this.getReserved(lID):_this.h[lID]));
		}
	}
	,__class__: com_isartdigital_utils_loader_GameLoader
});
var com_isartdigital_utils_sounds_SoundManager = function() {
};
$hxClasses["com.isartdigital.utils.sounds.SoundManager"] = com_isartdigital_utils_sounds_SoundManager;
com_isartdigital_utils_sounds_SoundManager.__name__ = ["com","isartdigital","utils","sounds","SoundManager"];
com_isartdigital_utils_sounds_SoundManager.addSound = function(pName,pSound) {
	if(com_isartdigital_utils_sounds_SoundManager.list == null) {
		com_isartdigital_utils_sounds_SoundManager.list = new haxe_ds_StringMap();
	}
	var _this = com_isartdigital_utils_sounds_SoundManager.list;
	if(__map_reserved[pName] != null) {
		_this.setReserved(pName,pSound);
	} else {
		_this.h[pName] = pSound;
	}
};
com_isartdigital_utils_sounds_SoundManager.getSound = function(pName) {
	var _this = com_isartdigital_utils_sounds_SoundManager.list;
	return __map_reserved[pName] != null?_this.getReserved(pName):_this.h[pName];
};
com_isartdigital_utils_sounds_SoundManager.prototype = {
	__class__: com_isartdigital_utils_sounds_SoundManager
};
var com_isartdigital_utils_system_DeviceCapabilities = function() { };
$hxClasses["com.isartdigital.utils.system.DeviceCapabilities"] = com_isartdigital_utils_system_DeviceCapabilities;
com_isartdigital_utils_system_DeviceCapabilities.__name__ = ["com","isartdigital","utils","system","DeviceCapabilities"];
com_isartdigital_utils_system_DeviceCapabilities.get_height = function() {
	return window.innerHeight;
};
com_isartdigital_utils_system_DeviceCapabilities.get_width = function() {
	return window.innerWidth;
};
com_isartdigital_utils_system_DeviceCapabilities.get_system = function() {
	if(new EReg("IEMobile","i").match(window.navigator.userAgent)) {
		return "IEMobile";
	} else if(new EReg("iPhone|iPad|iPod","i").match(window.navigator.userAgent)) {
		return "iOS";
	} else if(new EReg("BlackBerry","i").match(window.navigator.userAgent)) {
		return "BlackBerry";
	} else if(new EReg("PlayBook","i").match(window.navigator.userAgent)) {
		return "BlackBerry PlayBook";
	} else if(new EReg("Android","i").match(window.navigator.userAgent)) {
		return "Android";
	} else {
		return "Desktop";
	}
};
com_isartdigital_utils_system_DeviceCapabilities.get_isCocoonJS = function() {
	return window.navigator.isCocoonJS;
};
com_isartdigital_utils_system_DeviceCapabilities.displayFullScreenButton = function() {
	if(com_isartdigital_utils_system_DeviceCapabilities.get_isCocoonJS()) {
		return;
	}
	if(!new EReg("(iPad|iPhone|iPod)","g").match(window.navigator.userAgent) && !new EReg("MSIE","i").match(window.navigator.userAgent)) {
		window.document.onfullscreenchange = com_isartdigital_utils_system_DeviceCapabilities.onChangeFullScreen;
		window.document.onwebkitfullscreenchange = com_isartdigital_utils_system_DeviceCapabilities.onChangeFullScreen;
		window.document.onmozfullscreenchange = com_isartdigital_utils_system_DeviceCapabilities.onChangeFullScreen;
		window.document.onmsfullscreenchange = com_isartdigital_utils_system_DeviceCapabilities.onChangeFullScreen;
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton = new Image();
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.style.position = "absolute";
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.style.right = "0px";
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.style.top = "0px";
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.style.cursor = "pointer";
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.width = com_isartdigital_utils_system_DeviceCapabilities.getSizeFactor() * 0.11 | 0;
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.height = com_isartdigital_utils_system_DeviceCapabilities.getSizeFactor() * 0.11 | 0;
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.onclick = com_isartdigital_utils_system_DeviceCapabilities.enterFullscreen;
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.src = com_isartdigital_utils_Config.get_assetsPath() + "fullscreen.png";
		window.document.body.appendChild(com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton);
	}
};
com_isartdigital_utils_system_DeviceCapabilities.enterFullscreen = function(pEvent) {
	var lDocElm = window.document.documentElement;
	if($bind(lDocElm,lDocElm.requestFullscreen) != null) {
		lDocElm.requestFullscreen();
	} else if(lDocElm.mozRequestFullScreen != null) {
		lDocElm.mozRequestFullScreen();
	} else if(lDocElm.webkitRequestFullScreen != null) {
		lDocElm.webkitRequestFullScreen();
	} else if(lDocElm.msRequestFullscreen != null) {
		lDocElm.msRequestFullscreen();
	}
};
com_isartdigital_utils_system_DeviceCapabilities.exitFullscreen = function() {
	if(($_=window.document,$bind($_,$_.exitFullscreen)) != null) {
		window.document.exitFullscreen();
	} else if(window.document.mozCancelFullScreen != null) {
		window.document.mozCancelFullScreen();
	} else if(window.document.webkitCancelFullScreen != null) {
		window.document.webkitCancelFullScreen();
	} else if(window.document.msExitFullscreen) {
		window.document.msExitFullscreen();
	}
};
com_isartdigital_utils_system_DeviceCapabilities.onChangeFullScreen = function(pEvent) {
	if(window.document.fullScreen || (window.document.mozFullScreen || (window.document.webkitIsFullScreen || window.document.msFullscreenElement))) {
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.style.display = "none";
	} else {
		com_isartdigital_utils_system_DeviceCapabilities.fullScreenButton.style.display = "block";
	}
	pEvent.preventDefault();
};
com_isartdigital_utils_system_DeviceCapabilities.getSizeFactor = function() {
	var lSize = Math.floor(Math.min(_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_width()),_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_height())));
	if(com_isartdigital_utils_system_DeviceCapabilities.get_system() == "Desktop") {
		lSize /= 3;
	}
	return lSize;
};
com_isartdigital_utils_system_DeviceCapabilities.getScreenRect = function(pTarget) {
	var lTopLeft = new PIXI.Point(0,0);
	var lBottomRight = new PIXI.Point(_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_width()),_$UInt_UInt_$Impl_$.toFloat(com_isartdigital_utils_system_DeviceCapabilities.get_height()));
	lTopLeft = pTarget.toLocal(lTopLeft);
	lBottomRight = pTarget.toLocal(lBottomRight);
	return new PIXI.Rectangle(lTopLeft.x,lTopLeft.y,lBottomRight.x - lTopLeft.x,lBottomRight.y - lTopLeft.y);
};
com_isartdigital_utils_system_DeviceCapabilities.scaleViewport = function() {
	if(com_isartdigital_utils_system_DeviceCapabilities.get_system() == "IEMobile") {
		return;
	}
	com_isartdigital_utils_system_DeviceCapabilities.screenRatio = window.devicePixelRatio;
	if(!com_isartdigital_utils_system_DeviceCapabilities.get_isCocoonJS()) {
		window.document.write("<meta name=\"viewport\" content=\"initial-scale=" + Math.round(100 / com_isartdigital_utils_system_DeviceCapabilities.screenRatio) / 100 + ", user-scalable=no, minimal-ui\">");
	}
};
com_isartdigital_utils_system_DeviceCapabilities.init = function(pHd,pMd,pLd) {
	if(pLd == null) {
		pLd = 0.25;
	}
	if(pMd == null) {
		pMd = 0.5;
	}
	if(pHd == null) {
		pHd = 1;
	}
	var _this = com_isartdigital_utils_system_DeviceCapabilities.texturesRatios;
	if(__map_reserved.hd != null) {
		_this.setReserved("hd",pHd);
	} else {
		_this.h["hd"] = pHd;
	}
	var _this1 = com_isartdigital_utils_system_DeviceCapabilities.texturesRatios;
	if(__map_reserved.md != null) {
		_this1.setReserved("md",pMd);
	} else {
		_this1.h["md"] = pMd;
	}
	var _this2 = com_isartdigital_utils_system_DeviceCapabilities.texturesRatios;
	if(__map_reserved.ld != null) {
		_this2.setReserved("ld",pLd);
	} else {
		_this2.h["ld"] = pLd;
	}
	if(com_isartdigital_utils_Config.get_data().texture != null && com_isartdigital_utils_Config.get_data().texture != "") {
		com_isartdigital_utils_system_DeviceCapabilities.textureType = com_isartdigital_utils_Config.get_data().texture;
	} else {
		var lBW = Math.max(window.screen.width,window.screen.height);
		var lBH = Math.min(window.screen.width,window.screen.height);
		var lW = Math.max(com_isartdigital_utils_game_GameStage.getInstance().get_safeZone().width,com_isartdigital_utils_game_GameStage.getInstance().get_safeZone().height);
		var lH = Math.min(com_isartdigital_utils_game_GameStage.getInstance().get_safeZone().width,com_isartdigital_utils_game_GameStage.getInstance().get_safeZone().height);
		var lRatio = Math.min(lBW * com_isartdigital_utils_system_DeviceCapabilities.screenRatio / lW,lBH * com_isartdigital_utils_system_DeviceCapabilities.screenRatio / lH);
		if(lRatio <= pLd) {
			com_isartdigital_utils_system_DeviceCapabilities.textureType = "ld";
		} else if(lRatio <= pMd) {
			com_isartdigital_utils_system_DeviceCapabilities.textureType = "md";
		} else {
			com_isartdigital_utils_system_DeviceCapabilities.textureType = "hd";
		}
	}
	var _this3 = com_isartdigital_utils_system_DeviceCapabilities.texturesRatios;
	var key = com_isartdigital_utils_system_DeviceCapabilities.textureType;
	com_isartdigital_utils_system_DeviceCapabilities.textureRatio = __map_reserved[key] != null?_this3.getReserved(key):_this3.h[key];
};
var com_isartdigital_utils_ui_UIPosition = function() {
};
$hxClasses["com.isartdigital.utils.ui.UIPosition"] = com_isartdigital_utils_ui_UIPosition;
com_isartdigital_utils_ui_UIPosition.__name__ = ["com","isartdigital","utils","ui","UIPosition"];
com_isartdigital_utils_ui_UIPosition.setPosition = function(pTarget,pPosition,pOffsetX,pOffsetY) {
	if(pOffsetY == null) {
		pOffsetY = 0;
	}
	if(pOffsetX == null) {
		pOffsetX = 0;
	}
	var lScreen = com_isartdigital_utils_system_DeviceCapabilities.getScreenRect(pTarget.parent);
	var lTopLeft = new PIXI.Point(lScreen.x,lScreen.y);
	var lBottomRight = new PIXI.Point(lScreen.x + lScreen.width,lScreen.y + lScreen.height);
	if(pPosition == "top" || pPosition == "topLeft" || pPosition == "topRight") {
		pTarget.y = lTopLeft.y + pOffsetY;
	}
	if(pPosition == "bottom" || pPosition == "bottomLeft" || pPosition == "bottomRight") {
		pTarget.y = lBottomRight.y - pOffsetY;
	}
	if(pPosition == "left" || pPosition == "topLeft" || pPosition == "bottomLeft") {
		pTarget.x = lTopLeft.x + pOffsetX;
	}
	if(pPosition == "right" || pPosition == "topRight" || pPosition == "bottomRight") {
		pTarget.x = lBottomRight.x - pOffsetX;
	}
	if(pPosition == "fitWidth" || pPosition == "fitScreen") {
		pTarget.x = lTopLeft.x;
		pTarget.width = lBottomRight.x - lTopLeft.x;
	}
	if(pPosition == "fitHeight" || pPosition == "fitScreen") {
		pTarget.y = lTopLeft.y;
		pTarget.height = lBottomRight.y - lTopLeft.y;
	}
};
com_isartdigital_utils_ui_UIPosition.prototype = {
	__class__: com_isartdigital_utils_ui_UIPosition
};
var com_isartdigital_utils_ui_smart_SmartComponent = function(pID) {
	com_isartdigital_utils_ui_UIComponent.call(this,pID);
	this.build();
};
$hxClasses["com.isartdigital.utils.ui.smart.SmartComponent"] = com_isartdigital_utils_ui_smart_SmartComponent;
com_isartdigital_utils_ui_smart_SmartComponent.__name__ = ["com","isartdigital","utils","ui","smart","SmartComponent"];
com_isartdigital_utils_ui_smart_SmartComponent.__super__ = com_isartdigital_utils_ui_UIComponent;
com_isartdigital_utils_ui_smart_SmartComponent.prototype = $extend(com_isartdigital_utils_ui_UIComponent.prototype,{
	__class__: com_isartdigital_utils_ui_smart_SmartComponent
});
var com_isartdigital_utils_ui_smart_SmartButton = function(pID) {
	com_isartdigital_utils_ui_smart_SmartComponent.call(this,pID);
	this.set_modal(false);
	this.interactive = true;
	this.buttonMode = true;
	this.on("mouseover",$bind(this,this._mouseOver));
	this.on("mousedown",$bind(this,this._mouseDown));
	this.on("click",$bind(this,this._click));
	this.on("mouseout",$bind(this,this._mouseOut));
	this.on("mouseupoutside",$bind(this,this._mouseOut));
	this.on("touchstart",$bind(this,this._mouseDown));
	this.on("tap",$bind(this,this._click));
	this.on("touchend",$bind(this,this._mouseOut));
	this.on("touchendoutside",$bind(this,this._mouseOut));
};
$hxClasses["com.isartdigital.utils.ui.smart.SmartButton"] = com_isartdigital_utils_ui_smart_SmartButton;
com_isartdigital_utils_ui_smart_SmartButton.__name__ = ["com","isartdigital","utils","ui","smart","SmartButton"];
com_isartdigital_utils_ui_smart_SmartButton.__super__ = com_isartdigital_utils_ui_smart_SmartComponent;
com_isartdigital_utils_ui_smart_SmartButton.prototype = $extend(com_isartdigital_utils_ui_smart_SmartComponent.prototype,{
	build: function(pFrame) {
		if(pFrame == null) {
			pFrame = 0;
		}
		com_isartdigital_utils_ui_smart_SmartComponent.prototype.build.call(this,3);
		this.hitArea = this.getBounds().clone();
		this._mouseOut();
	}
	,clear: function() {
		while(this.children.length > 0) this.removeChildAt(0);
	}
	,_click: function(pEvent) {
		this._mouseOut();
	}
	,_mouseDown: function(pEvent) {
		this.clear();
		com_isartdigital_utils_ui_smart_SmartComponent.prototype.build.call(this,2);
	}
	,_mouseOver: function(pEvent) {
		this.clear();
		com_isartdigital_utils_ui_smart_SmartComponent.prototype.build.call(this,1);
	}
	,_mouseOut: function(pEvent) {
		this.clear();
		com_isartdigital_utils_ui_smart_SmartComponent.prototype.build.call(this);
	}
	,destroy: function() {
		this.off("mouseover",$bind(this,this._mouseOver));
		this.off("mousedown",$bind(this,this._mouseDown));
		this.off("click",$bind(this,this._click));
		this.off("mouseout",$bind(this,this._mouseOut));
		this.off("mouseupoutside",$bind(this,this._mouseOut));
		this.off("touchstart",$bind(this,this._mouseDown));
		this.off("tap",$bind(this,this._click));
		this.off("touchend",$bind(this,this._mouseOut));
		this.off("touchendoutside",$bind(this,this._mouseOut));
		com_isartdigital_utils_ui_smart_SmartComponent.prototype.destroy.call(this);
	}
	,__class__: com_isartdigital_utils_ui_smart_SmartButton
});
var com_isartdigital_utils_ui_smart_TextSprite = function(pData) {
	PIXI.Container.call(this);
	var lStyle = { font : StringTools.replace(pData.font,"*",""), fill : pData.color, align : pData.align, wordWrap : pData.wordWrap == 1, wordWrapWidth : pData.width};
	this.textField = new PIXI.Text(com_isartdigital_utils_ui_smart_TextSprite.parseText(StringTools.replace(pData.text,"</BR>","\r")),lStyle);
	if(pData.align == "center") {
		this.textField.anchor.x = 0.5;
	} else if(pData.align == "right") {
		this.textField.anchor.x = 1;
	}
	if(pData.verticalAlign == "top") {
		this.textField.anchor.y = 0;
	}
	if(pData.verticalAlign == "bottom") {
		this.textField.anchor.y = 1;
	} else {
		this.textField.anchor.y = 0.5;
	}
	if(com_isartdigital_utils_Config.get_debug()) {
		var lGraph = new PIXI.Graphics();
		lGraph.beginFill(16776960);
		lGraph.drawRect(pData.x,pData.y,pData.width,pData.height);
		lGraph.endFill();
		lGraph.alpha = 0.5;
		this.addChild(lGraph);
	}
	this.addChild(this.textField);
};
$hxClasses["com.isartdigital.utils.ui.smart.TextSprite"] = com_isartdigital_utils_ui_smart_TextSprite;
com_isartdigital_utils_ui_smart_TextSprite.__name__ = ["com","isartdigital","utils","ui","smart","TextSprite"];
com_isartdigital_utils_ui_smart_TextSprite.defaultParseText = function(pTxt) {
	return pTxt;
};
com_isartdigital_utils_ui_smart_TextSprite.__super__ = PIXI.Container;
com_isartdigital_utils_ui_smart_TextSprite.prototype = $extend(PIXI.Container.prototype,{
	get_text: function() {
		return this.textField.text;
	}
	,set_text: function(pText) {
		this.textField.text = pText;
		return pText;
	}
	,__class__: com_isartdigital_utils_ui_smart_TextSprite
});
var com_isartdigital_utils_ui_smart_UIBuilder = function() {
};
$hxClasses["com.isartdigital.utils.ui.smart.UIBuilder"] = com_isartdigital_utils_ui_smart_UIBuilder;
com_isartdigital_utils_ui_smart_UIBuilder.__name__ = ["com","isartdigital","utils","ui","smart","UIBuilder"];
com_isartdigital_utils_ui_smart_UIBuilder.build = function(pId,pFrame) {
	if(pFrame == null) {
		pFrame = 0;
	}
	var lMovie = pixi_flump_Resource.getResourceForMovie(pId).library.movies.h[pId];
	var lObj;
	var lUIPos = [];
	var lLayer;
	var lKeyFrame;
	var _g1 = 0;
	var _g = lMovie.layers.length;
	while(_g1 < _g) {
		var i = _g1++;
		lObj = null;
		lLayer = lMovie.layers[i];
		lKeyFrame = lLayer.getKeyframeForFrame(pFrame);
		if(lKeyFrame == null) {
			continue;
		}
		if(lKeyFrame.symbol.data != null && lKeyFrame.symbol.data.className != null) {
			lObj = Type.createInstance(Type.resolveClass(lKeyFrame.symbol.data.className),[]);
		} else if(lKeyFrame.symbol.baseClass == "Flipbook") {
			lObj = new com_isartdigital_utils_ui_smart_UIMovie(lKeyFrame.symbolId);
		} else if(lKeyFrame.symbol.baseClass == "TextSprite") {
			lObj = new com_isartdigital_utils_ui_smart_TextSprite(lKeyFrame.symbol.data);
		} else if(js_Boot.__instanceof(lKeyFrame.symbol,flump_library_SpriteSymbol)) {
			lObj = new com_isartdigital_utils_ui_smart_UISprite(lKeyFrame.symbolId);
		} else if(lKeyFrame.symbol.baseClass == "flash.display.SimpleButton") {
			lObj = new com_isartdigital_utils_ui_smart_SmartButton(lKeyFrame.symbolId);
		} else {
			var lChild = pixi_flump_Resource.getResourceForMovie(lKeyFrame.symbolId).library.movies.h[lKeyFrame.symbolId];
			var lChildLayer;
			var _g2 = 0;
			var _g3 = lChild.layers;
			while(_g2 < _g3.length) {
				var lChildLayer1 = _g3[_g2];
				++_g2;
				if(lChildLayer1.keyframes.length > 1) {
					lObj = new com_isartdigital_utils_ui_smart_UIMovie(lKeyFrame.symbolId);
					break;
				}
			}
			if(lObj == null) {
				lObj = new com_isartdigital_utils_ui_smart_SmartComponent(lKeyFrame.symbolId);
				(js_Boot.__cast(lObj , com_isartdigital_utils_ui_smart_SmartComponent)).set_modal(false);
			}
		}
		lObj.name = lLayer.name;
		lObj.position = new PIXI.Point(lKeyFrame.location.x / com_isartdigital_utils_system_DeviceCapabilities.textureRatio,lKeyFrame.location.y / com_isartdigital_utils_system_DeviceCapabilities.textureRatio);
		lObj.scale = new PIXI.Point(lKeyFrame.scale.x,lKeyFrame.scale.y);
		lObj.skew = new PIXI.Point(lKeyFrame.skew.x,lKeyFrame.skew.y);
		if(lKeyFrame.tintMultiplier != null && lKeyFrame.tintMultiplier != 0) {
			lObj.filters = [new flump_filters_AnimateTintFilter(lKeyFrame.tintColor,lKeyFrame.tintMultiplier)];
		}
		var lUIPosition = "";
		if(lKeyFrame.data != null) {
			var o = lKeyFrame.data;
			var field = "UIPosition_" + com_isartdigital_utils_system_DeviceCapabilities.get_system();
			if(Object.prototype.hasOwnProperty.call(o,field)) {
				lUIPosition = Reflect.field(lKeyFrame.data,"UIPosition_" + com_isartdigital_utils_system_DeviceCapabilities.get_system());
			} else if(lKeyFrame.data.UIPosition != null) {
				lUIPosition = lKeyFrame.data.UIPosition;
			}
		}
		lUIPos.push(com_isartdigital_utils_ui_smart_UIBuilder.getUIPositionable(lObj,lUIPosition));
	}
	return lUIPos;
};
com_isartdigital_utils_ui_smart_UIBuilder.getUIPositionable = function(pObj,pPosition) {
	var lOffset = new PIXI.Point(0,0);
	if(pPosition == "top" || pPosition == "topLeft" || pPosition == "topRight" || pPosition == "bottom" || pPosition == "bottomLeft" || pPosition == "bottomRight") {
		lOffset.y = pObj.y;
	}
	if(pPosition == "left" || pPosition == "topLeft" || pPosition == "bottomLeft" || pPosition == "right" || pPosition == "topRight" || pPosition == "bottomRight") {
		lOffset.x = pObj.x;
	}
	return { item : pObj, align : pPosition, offsetX : lOffset.x, offsetY : lOffset.y, update : true};
};
com_isartdigital_utils_ui_smart_UIBuilder.prototype = {
	__class__: com_isartdigital_utils_ui_smart_UIBuilder
};
var com_isartdigital_utils_ui_smart_UIMovie = function(pAssetName) {
	com_isartdigital_utils_game_StateGraphic.call(this);
	this.assetName = pAssetName;
	this.factory = new com_isartdigital_utils_game_factory_FlumpMovieAnimFactory();
	this.setState(this.DEFAULT_STATE,true);
};
$hxClasses["com.isartdigital.utils.ui.smart.UIMovie"] = com_isartdigital_utils_ui_smart_UIMovie;
com_isartdigital_utils_ui_smart_UIMovie.__name__ = ["com","isartdigital","utils","ui","smart","UIMovie"];
com_isartdigital_utils_ui_smart_UIMovie.__super__ = com_isartdigital_utils_game_StateGraphic;
com_isartdigital_utils_ui_smart_UIMovie.prototype = $extend(com_isartdigital_utils_game_StateGraphic.prototype,{
	__class__: com_isartdigital_utils_ui_smart_UIMovie
});
var com_isartdigital_utils_ui_smart_UISprite = function(pAssetName) {
	com_isartdigital_utils_game_StateGraphic.call(this);
	this.assetName = pAssetName;
	this.factory = new com_isartdigital_utils_game_factory_FlumpSpriteAnimFactory();
	this.setState(this.DEFAULT_STATE);
};
$hxClasses["com.isartdigital.utils.ui.smart.UISprite"] = com_isartdigital_utils_ui_smart_UISprite;
com_isartdigital_utils_ui_smart_UISprite.__name__ = ["com","isartdigital","utils","ui","smart","UISprite"];
com_isartdigital_utils_ui_smart_UISprite.__super__ = com_isartdigital_utils_game_StateGraphic;
com_isartdigital_utils_ui_smart_UISprite.prototype = $extend(com_isartdigital_utils_game_StateGraphic.prototype,{
	__class__: com_isartdigital_utils_ui_smart_UISprite
});
var flump_DisplayObjectKey = function(symbolId) {
	this.symbolId = symbolId;
};
$hxClasses["flump.DisplayObjectKey"] = flump_DisplayObjectKey;
flump_DisplayObjectKey.__name__ = ["flump","DisplayObjectKey"];
flump_DisplayObjectKey.prototype = {
	__class__: flump_DisplayObjectKey
};
var flump_IFlumpMovie = function() { };
$hxClasses["flump.IFlumpMovie"] = flump_IFlumpMovie;
flump_IFlumpMovie.__name__ = ["flump","IFlumpMovie"];
flump_IFlumpMovie.prototype = {
	__class__: flump_IFlumpMovie
};
var flump_MoviePlayer = function(symbol,movie,resolution) {
	this.position = 0.0;
	this.fullyGenerated = false;
	this.dirty = false;
	this.changed = 0;
	this.labelsToFire = [];
	this.childPlayers = new haxe_ds_ObjectMap();
	this.createdChildren = new haxe_ds_ObjectMap();
	this.currentChildrenKey = new haxe_ds_ObjectMap();
	this.STATE_STOPPED = "stopped";
	this.STATE_LOOPING = "looping";
	this.STATE_PLAYING = "playing";
	this.independantControl = true;
	this.independantTimeline = true;
	this.prevPosition = -1;
	this.advanced = 0.0;
	this.previousElapsed = 0.0;
	this.elapsed = 0.0;
	this.symbol = symbol;
	this.movie = movie;
	this.resolution = resolution;
	var _g = 0;
	var _g1 = symbol.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		movie.createLayer(layer);
	}
	this.state = this.STATE_LOOPING;
	this.advanceTime(0);
	var _g2 = 0;
	var _g11 = symbol.layers;
	while(_g2 < _g11.length) {
		var layer1 = _g11[_g2];
		++_g2;
		movie.setMask(layer1);
	}
};
$hxClasses["flump.MoviePlayer"] = flump_MoviePlayer;
flump_MoviePlayer.__name__ = ["flump","MoviePlayer"];
flump_MoviePlayer.prototype = {
	get_labels: function() {
		var _this = this.symbol.labels;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,getDisplayKey: function(layerId,keyframeIndex) {
		if(keyframeIndex == null) {
			keyframeIndex = 0;
		}
		var layer = this.symbol.getLayer(layerId);
		if(layer == null) {
			throw new js__$Boot_HaxeError("Layer " + layerId + " does not exist.");
		}
		var keyframe = layer.getKeyframeForFrame(keyframeIndex);
		if(keyframe == null) {
			throw new js__$Boot_HaxeError("Keyframe does not exist at index " + Std.string(_$UInt_UInt_$Impl_$.toFloat(keyframeIndex)));
		}
		this.createChildIfNessessary(keyframe);
		return keyframe.displayKey;
	}
	,reset: function() {
		this.elapsed = 0;
		this.previousElapsed = 0;
		this.prevPosition = -1;
	}
	,get_position: function() {
		var lModPos = (this.elapsed % this.symbol.duration + this.symbol.duration) % this.symbol.duration;
		var lEndPos;
		if(this.state == this.STATE_PLAYING) {
			lEndPos = this.symbol.duration - this.symbol.library.frameTime;
			if(this.elapsed >= lEndPos) {
				return lEndPos;
			} else {
				return lModPos;
			}
		} else {
			return lModPos;
		}
	}
	,get_totalFrames: function() {
		return this.symbol.totalFrames;
	}
	,play: function() {
		this.setState(this.STATE_PLAYING);
		return this;
	}
	,loop: function() {
		this.setState(this.STATE_LOOPING);
		return this;
	}
	,stop: function() {
		this.setState(this.STATE_STOPPED);
		return this;
	}
	,goToLabel: function(label) {
		if(!this.labelExists(label)) {
			throw new js__$Boot_HaxeError("Symbol " + this.symbol.name + " does not have label " + label + ".");
		}
		this.set_currentFrame(this.getLabelFrame(label));
		this.fireHitFrames(this.getLabelFrame(label));
		return this;
	}
	,goToFrame: function(frame) {
		this.set_currentFrame(frame);
		this.fireHitFrames(frame);
		return this;
	}
	,fireHitFrames: function(frame) {
		this.changed++;
		var current = this.changed;
		var time = frame * this.symbol.library.frameTime;
		var _g = 0;
		var _g1 = this.symbol.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = layer.keyframes;
			while(_g2 < _g3.length) {
				var kf = _g3[_g2];
				++_g2;
				if(current != this.changed) {
					return;
				}
				if(kf.label != null) {
					if(kf.timeInside(time)) {
						this.movie.labelHit(kf.label);
					}
				}
			}
		}
	}
	,goToPosition: function(time) {
		this.elapsed = time;
		this.previousElapsed = time;
		this.clearLabels();
		return this;
	}
	,get_playing: function() {
		return this.state == this.STATE_PLAYING;
	}
	,get_looping: function() {
		return this.state == this.STATE_LOOPING;
	}
	,get_stopped: function() {
		return this.state == this.STATE_STOPPED;
	}
	,getLabelFrame: function(label) {
		if(!this.labelExists(label)) {
			throw new js__$Boot_HaxeError("Symbol " + this.symbol.name + " does not have label " + label + ".");
		}
		var _this = this.symbol.labels;
		return (__map_reserved[label] != null?_this.getReserved(label):_this.h[label]).keyframe.index;
	}
	,get_currentFrame: function() {
		return this.get_position() / this.symbol.library.frameTime | 0;
	}
	,set_currentFrame: function(value) {
		this.goToPosition(this.symbol.library.frameTime * value);
		return value;
	}
	,labelExists: function(label) {
		var _this = this.symbol.labels;
		if(__map_reserved[label] != null) {
			return _this.existsReserved(label);
		} else {
			return _this.h.hasOwnProperty(label);
		}
	}
	,advanceTime: function(ms) {
		if(this.state != this.STATE_STOPPED) {
			this.elapsed += ms;
			while(this.elapsed < 0) {
				this.elapsed += this.symbol.duration;
				this.previousElapsed += this.symbol.duration;
			}
		}
		this.advanced += ms;
		if(this.state != this.STATE_STOPPED) {
			this.fireLabels();
		}
		this.render();
	}
	,clearLabels: function() {
		while(this.labelsToFire.length > 0) this.labelsToFire.pop();
	}
	,fireLabels: function() {
		if(this.symbol.firstLabel == null) {
			return;
		}
		if(this.previousElapsed > this.elapsed) {
			return;
		}
		var label = this.previousElapsed <= this.elapsed?this.symbol.firstLabel:this.symbol.lastLabel;
		var checking = true;
		while(checking) if(label.keyframe.time > this.previousElapsed % this.symbol.duration) {
			checking = false;
		} else if(_$UInt_UInt_$Impl_$.gte(label.keyframe.index,label.next.keyframe.index)) {
			checking = false;
			label = label.next;
		} else {
			label = label.next;
		}
		var firstChecked = label;
		while(label != null) {
			if(label.keyframe.insideRangeStart(this.previousElapsed % this.symbol.duration,this.elapsed % this.symbol.duration) && this.state != this.STATE_STOPPED) {
				this.labelsToFire.push(label);
			}
			label = label.next;
			if(label == firstChecked) {
				label = null;
			}
		}
		while(this.labelsToFire.length > 0) this.movie.labelPassed(this.labelsToFire.shift());
	}
	,render: function() {
		var lIsUpdate = true;
		var next = null;
		var interped = -1;
		var lColor = -1;
		if(this.state == this.STATE_PLAYING) {
			if(this.get_position() >= this.symbol.duration - this.symbol.library.frameTime) {
				this.elapsed = this.symbol.duration - this.symbol.library.frameTime;
				this.stop();
				this.movie.onAnimationComplete();
			}
		}
		if(this.get_position() != this.prevPosition && (this.prevPosition < 0 || _$UInt_UInt_$Impl_$.gt(this.get_totalFrames(),1))) {
			this.prevPosition = this.get_position();
		} else {
			lIsUpdate = false;
		}
		var _g = 0;
		var _g1 = this.symbol.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			var keyframe = layer.getKeyframeForTime(this.get_position());
			if(keyframe.isEmpty == true) {
				this.removeChildIfNessessary(keyframe);
			} else if(keyframe.isEmpty == false) {
				if(lIsUpdate) {
					interped = this.getInterpolation(keyframe,this.get_position());
					next = keyframe.next;
					if(next.isEmpty) {
						next = keyframe;
					}
					if(keyframe.tintColor != next.tintColor) {
						var lPrevColor = keyframe.tintColor;
						var lNextColor = next.tintColor;
						var lPrevR = lPrevColor >> 16 & 255;
						var lPrevG = lPrevColor >> 8 & 255;
						var lPrevB = lPrevColor & 255;
						lColor = Math.round(lPrevR + ((lNextColor >> 16 & 255) - lPrevR) * interped) << 16 | Math.round(lPrevG + ((lNextColor >> 8 & 255) - lPrevG) * interped) << 8 | Math.round(lPrevB + ((lNextColor & 255) - lPrevB) * interped);
					} else {
						lColor = keyframe.tintColor;
					}
					if(this.currentChildrenKey.h[layer.__id__] != keyframe.displayKey) {
						this.createChildIfNessessary(keyframe);
						this.removeChildIfNessessary(keyframe);
						this.addChildIfNessessary(keyframe);
					}
				}
				if(js_Boot.__instanceof(keyframe.symbol,flump_library_MovieSymbol)) {
					var childMovie = this.movie.getChildPlayer(keyframe);
					if(childMovie.independantTimeline) {
						childMovie.advanceTime(this.advanced);
					} else {
						childMovie.elapsed = this.get_position();
						childMovie.render();
					}
				}
				if(lIsUpdate) {
					this.movie.renderFrame(keyframe,keyframe.location.x + (next.location.x - keyframe.location.x) * interped,keyframe.location.y + (next.location.y - keyframe.location.y) * interped,keyframe.scale.x + (next.scale.x - keyframe.scale.x) * interped,keyframe.scale.y + (next.scale.y - keyframe.scale.y) * interped,keyframe.skew.x + (next.skew.x - keyframe.skew.x) * interped,keyframe.skew.y + (next.skew.y - keyframe.skew.y) * interped,keyframe.alpha + (next.alpha - keyframe.alpha) * interped,keyframe.tintMultiplier + (next.tintMultiplier - keyframe.tintMultiplier) * interped,lColor);
				}
			}
		}
		this.advanced = 0;
		this.previousElapsed = this.elapsed;
	}
	,createChildIfNessessary: function(keyframe) {
		if(keyframe.isEmpty) {
			return;
		}
		if(this.createdChildren.h.__keys__[keyframe.displayKey.__id__] != null == false) {
			this.movie.createFlumpChild(keyframe.displayKey);
			this.createdChildren.set(keyframe.displayKey,true);
		}
	}
	,removeChildIfNessessary: function(keyframe) {
		if(this.currentChildrenKey.h.__keys__[keyframe.layer.__id__] != null) {
			this.movie.removeFlumpChild(keyframe.layer,keyframe.displayKey);
			this.currentChildrenKey.remove(keyframe.layer);
		}
	}
	,addChildIfNessessary: function(keyframe) {
		if(keyframe.isEmpty) {
			return;
		}
		this.currentChildrenKey.set(keyframe.layer,keyframe.displayKey);
		this.movie.addFlumpChild(keyframe.layer,keyframe.displayKey);
	}
	,setState: function(state) {
		this.state = state;
		var _g = 0;
		var _g1 = this.symbol.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			var keyframe = layer.getKeyframeForTime(this.get_position());
			this.createChildIfNessessary(keyframe);
			if(js_Boot.__instanceof(keyframe.symbol,flump_library_MovieSymbol)) {
				var childMovie = this.movie.getChildPlayer(keyframe);
				if(childMovie.independantControl == false) {
					childMovie.setState(state);
				}
			}
		}
		this.advanceTime(0);
	}
	,timeForLabel: function(label) {
		var _this = this.symbol.labels;
		return (__map_reserved[label] != null?_this.getReserved(label):_this.h[label]).keyframe.time;
	}
	,getInterpolation: function(keyframe,time) {
		if(keyframe.tweened == false) {
			return 0.0;
		}
		var interped = (time - keyframe.time) / keyframe.duration;
		var ease = keyframe.ease;
		if(ease != 0) {
			var t;
			if(ease < 0) {
				var inv = 1 - interped;
				t = 1 - inv * inv;
				ease = -ease;
			} else {
				t = interped * interped;
			}
			interped = ease * t + (1 - ease) * interped;
		}
		return interped;
	}
	,__class__: flump_MoviePlayer
};
var flump_filters_AnimateTintFilter = function(pColor,pMultiplier) {
	if(pMultiplier == null) {
		pMultiplier = 1;
	}
	this.color = pColor;
	this.multiplier = pMultiplier;
	this.uniforms = { color : { type : "v3", value : this.hex2v3(this.color)}, multiplier : { type : "1f", value : this.multiplier}};
	PIXI.AbstractFilter.call(this,null,this.getFragmentSrc(),this.uniforms);
};
$hxClasses["flump.filters.AnimateTintFilter"] = flump_filters_AnimateTintFilter;
flump_filters_AnimateTintFilter.__name__ = ["flump","filters","AnimateTintFilter"];
flump_filters_AnimateTintFilter.__super__ = PIXI.AbstractFilter;
flump_filters_AnimateTintFilter.prototype = $extend(PIXI.AbstractFilter.prototype,{
	getFragmentSrc: function() {
		var lSrc = "";
		lSrc = "precision mediump float;varying vec2 vTextureCoord;uniform sampler2D uSampler;uniform vec3 color;uniform float multiplier;";
		lSrc = "precision mediump float;varying vec2 vTextureCoord;uniform sampler2D uSampler;uniform vec3 color;uniform float multiplier;" + "void main () { gl_FragColor = texture2D(uSampler, vTextureCoord);";
		lSrc += "gl_FragColor.r = (color.r*multiplier+gl_FragColor.r*(1.0-multiplier)) * gl_FragColor.a;";
		lSrc += "gl_FragColor.g = (color.g*multiplier+gl_FragColor.g*(1.0-multiplier)) * gl_FragColor.a;";
		lSrc += "gl_FragColor.b = (color.b*multiplier+gl_FragColor.b*(1.0-multiplier)) * gl_FragColor.a;";
		lSrc += "}";
		return lSrc;
	}
	,hex2v3: function(pColor) {
		return { x : _$UInt_UInt_$Impl_$.toFloat(pColor >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255), y : _$UInt_UInt_$Impl_$.toFloat(pColor >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255), z : _$UInt_UInt_$Impl_$.toFloat(pColor & 255) / _$UInt_UInt_$Impl_$.toFloat(255)};
	}
	,update: function(pColor,pMultiplier) {
		if(pMultiplier == null) {
			pMultiplier = 1;
		}
		this.uniforms.color.value = this.hex2v3(this.color = pColor);
		this.uniforms.multiplier.value = this.multiplier = pMultiplier;
	}
	,__class__: flump_filters_AnimateTintFilter
});
var flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$ = {};
$hxClasses["flump.json._FlumpJSON.FlumpPointSpec_Impl_"] = flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$;
flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$.__name__ = ["flump","json","_FlumpJSON","FlumpPointSpec_Impl_"];
flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$.get_x = function(this1) {
	return this1[0];
};
flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$.get_y = function(this1) {
	return this1[1];
};
var flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$ = {};
$hxClasses["flump.json._FlumpJSON.FlumpRectSpec_Impl_"] = flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$;
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.__name__ = ["flump","json","_FlumpJSON","FlumpRectSpec_Impl_"];
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_x = function(this1) {
	return this1[0];
};
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_y = function(this1) {
	return this1[1];
};
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_width = function(this1) {
	return this1[2];
};
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_height = function(this1) {
	return this1[3];
};
var flump_library_FlumpLibrary = function(resolution) {
	this.atlases = [];
	this.sprites = new haxe_ds_StringMap();
	this.movies = new haxe_ds_StringMap();
	this.resolution = resolution;
};
$hxClasses["flump.library.FlumpLibrary"] = flump_library_FlumpLibrary;
flump_library_FlumpLibrary.__name__ = ["flump","library","FlumpLibrary"];
flump_library_FlumpLibrary.create = function(flumpData,resolution) {
	var lib = flumpData;
	var spriteSymbols = new haxe_ds_StringMap();
	var movieSymbols = new haxe_ds_StringMap();
	var flumpLibrary = new flump_library_FlumpLibrary(resolution);
	flumpLibrary.sprites = spriteSymbols;
	flumpLibrary.movies = movieSymbols;
	flumpLibrary.framerate = _$UInt_UInt_$Impl_$.toFloat(lib.frameRate);
	flumpLibrary.frameTime = 1000 / flumpLibrary.framerate;
	flumpLibrary.md5 = lib.md5;
	var atlasSpecs = [];
	var textureGroup = null;
	var _g = 0;
	var _g1 = lib.textureGroups;
	while(_g < _g1.length) {
		var tg = _g1[_g];
		++_g;
		if(_$UInt_UInt_$Impl_$.toFloat(tg.scaleFactor) >= resolution && textureGroup == null) {
			textureGroup = tg;
		}
	}
	if(textureGroup == null) {
		textureGroup = lib.textureGroups[lib.textureGroups.length - 1];
	}
	var _g2 = 0;
	var _g11 = textureGroup.atlases;
	while(_g2 < _g11.length) {
		var atlas = _g11[_g2];
		++_g2;
		flumpLibrary.atlases.push(atlas);
		atlasSpecs.push(atlas);
	}
	var _g3 = 0;
	while(_g3 < atlasSpecs.length) {
		var spec = atlasSpecs[_g3];
		++_g3;
		var _g12 = 0;
		var _g21 = spec.textures;
		while(_g12 < _g21.length) {
			var textureSpec = _g21[_g12];
			++_g12;
			new flump_library_Rectangle(textureSpec.rect[0],textureSpec.rect[1],textureSpec.rect[2],textureSpec.rect[3]);
			var origin = new flump_library_Point(textureSpec.origin[0],textureSpec.origin[1]);
			var symbol = new flump_library_SpriteSymbol();
			symbol.name = textureSpec.symbol;
			symbol.data = textureSpec.data;
			symbol.baseClass = textureSpec.baseClass;
			symbol.origin = origin;
			symbol.texture = textureSpec.symbol;
			var key = symbol.name;
			if(__map_reserved[key] != null) {
				spriteSymbols.setReserved(key,symbol);
			} else {
				spriteSymbols.h[key] = symbol;
			}
		}
	}
	var pendingSymbolAttachments = new haxe_ds_ObjectMap();
	var _g4 = 0;
	var _g13 = lib.movies;
	while(_g4 < _g13.length) {
		var movieSpec = _g13[_g4];
		++_g4;
		var symbol1 = new flump_library_MovieSymbol();
		symbol1.name = movieSpec.id;
		symbol1.data = movieSpec.data;
		symbol1.baseClass = movieSpec.baseClass;
		symbol1.library = flumpLibrary;
		var _g22 = 0;
		var _g31 = movieSpec.layers;
		while(_g22 < _g31.length) {
			var layerSpec = _g31[_g22];
			++_g22;
			var layer = new flump_library_Layer(layerSpec.name);
			layer.movie = symbol1;
			layer.mask = layerSpec.mask;
			var previousKeyframe = null;
			var _g41 = 0;
			var _g5 = layerSpec.keyframes;
			while(_g41 < _g5.length) {
				var keyframeSpec = _g5[_g41];
				++_g41;
				var keyframe = new flump_library_Keyframe();
				keyframe.prev = previousKeyframe;
				if(previousKeyframe != null) {
					previousKeyframe.next = keyframe;
				}
				keyframe.layer = layer;
				keyframe.numFrames = keyframeSpec.duration;
				keyframe.duration = _$UInt_UInt_$Impl_$.toFloat(keyframeSpec.duration) * flumpLibrary.frameTime;
				keyframe.index = keyframeSpec.index;
				var time = _$UInt_UInt_$Impl_$.toFloat(keyframe.index) * flumpLibrary.frameTime;
				time *= 10;
				time = Math.floor(time);
				time /= 10;
				keyframe.time = time;
				if(keyframeSpec.ref == null) {
					keyframe.isEmpty = true;
				} else {
					keyframe.isEmpty = false;
					keyframe.symbolId = keyframeSpec.ref;
					keyframe.pivot = keyframeSpec.pivot == null?new flump_library_Point(0,0):new flump_library_Point(keyframeSpec.pivot[0] * resolution,keyframeSpec.pivot[1] * resolution);
					keyframe.location = keyframeSpec.loc == null?new flump_library_Point(0,0):new flump_library_Point(keyframeSpec.loc[0] * resolution,keyframeSpec.loc[1] * resolution);
					keyframe.tweened = keyframeSpec.tweened == false?false:true;
					keyframe.symbol = null;
					keyframe.scale = keyframeSpec.scale == null?new flump_library_Point(1,1):new flump_library_Point(keyframeSpec.scale[0],keyframeSpec.scale[1]);
					keyframe.skew = keyframeSpec.skew == null?new flump_library_Point(0,0):new flump_library_Point(keyframeSpec.skew[0],keyframeSpec.skew[1]);
					keyframe.alpha = keyframeSpec.alpha == null?1:keyframeSpec.alpha;
					keyframe.tintMultiplier = keyframeSpec.tint == null?0:keyframeSpec.tint[0];
					keyframe.tintColor = keyframeSpec.tint == null?0:Std.parseInt(StringTools.replace(js_Boot.__cast(keyframeSpec.tint[1] , String),"#","0x"));
					keyframe.data = keyframeSpec.data;
					keyframe.ease = keyframeSpec.ease == null?0:keyframeSpec.ease;
				}
				if(layer.keyframes.length == 0) {
					layer.firstKeyframe = keyframe;
				}
				if(keyframeSpec.label != null) {
					keyframe.label = new flump_library_Label();
					keyframe.label.keyframe = keyframe;
					keyframe.label.name = keyframeSpec.label;
					var _this = symbol1.labels;
					var key1 = keyframe.label.name;
					var value = keyframe.label;
					if(__map_reserved[key1] != null) {
						_this.setReserved(key1,value);
					} else {
						_this.h[key1] = value;
					}
				}
				var tmp = keyframe.time + keyframe.duration > layer.duration;
				pendingSymbolAttachments.set(keyframe,keyframeSpec.ref);
				layer.keyframes.push(keyframe);
				previousKeyframe = keyframe;
			}
			layer.lastKeyframe = layer.keyframes[layer.keyframes.length - 1];
			layer.keyframes[0].prev = layer.lastKeyframe;
			layer.lastKeyframe.next = layer.keyframes[0];
			symbol1.layers.push(layer);
			if(!Lambda.foreach(layer.keyframes,(function() {
				return function(keyframe1) {
					return keyframe1.isEmpty;
				};
			})())) {
				var _g42 = 0;
				var _g51 = layer.keyframes;
				while(_g42 < _g51.length) {
					var keyframe2 = [_g51[_g42]];
					++_g42;
					if(Lambda.exists(layer.keyframes,(function(keyframe3) {
						return function(checkedKeyframe) {
							if(checkedKeyframe.isEmpty == false) {
								return checkedKeyframe != keyframe3[0];
							} else {
								return false;
							}
						};
					})(keyframe2))) {
						var checked = keyframe2[0].prev;
						while(checked.isEmpty) checked = checked.prev;
						keyframe2[0].prevNonEmptyKeyframe = checked;
						checked = keyframe2[0].next;
						while(checked.isEmpty) checked = checked.next;
						keyframe2[0].nextNonEmptyKeyframe = checked;
					} else {
						keyframe2[0].prevNonEmptyKeyframe = keyframe2[0];
						keyframe2[0].nextNonEmptyKeyframe = keyframe2[0];
					}
				}
				var firstNonEmpty = Lambda.find(layer.keyframes,(function() {
					return function(checkedKeyframe1) {
						return checkedKeyframe1.isEmpty == false;
					};
				})());
				if(firstNonEmpty != null) {
					firstNonEmpty.displayKey = new flump_DisplayObjectKey(firstNonEmpty.symbolId);
				}
				var checked1 = firstNonEmpty.nextNonEmptyKeyframe;
				while(checked1 != firstNonEmpty) {
					if(checked1.symbolId == checked1.prevNonEmptyKeyframe.symbolId) {
						checked1.displayKey = checked1.prevNonEmptyKeyframe.displayKey;
					} else {
						checked1.displayKey = new flump_DisplayObjectKey(checked1.symbolId);
					}
					checked1 = checked1.nextNonEmptyKeyframe;
				}
			}
		}
		symbol1.totalFrames = Lambda.fold(symbol1.layers,(function() {
			return function(layer1,accum) {
				var layerLength = layer1.lastKeyframe.index + layer1.lastKeyframe.numFrames;
				if(_$UInt_UInt_$Impl_$.gt(layerLength,accum)) {
					return layerLength;
				} else {
					return accum;
				}
			};
		})(),0);
		symbol1.duration = _$UInt_UInt_$Impl_$.toFloat(symbol1.totalFrames) * flumpLibrary.frameTime;
		var labels = [];
		var _g23 = 0;
		var _g32 = symbol1.layers;
		while(_g23 < _g32.length) {
			var layer2 = _g32[_g23];
			++_g23;
			var _g43 = 0;
			var _g52 = layer2.keyframes;
			while(_g43 < _g52.length) {
				var keyframe4 = _g52[_g43];
				++_g43;
				if(keyframe4.label != null) {
					labels.push(keyframe4.label);
				}
			}
		}
		haxe_ds_ArraySort.sort(labels,flump_library_FlumpLibrary.sortLabel);
		var _g33 = 0;
		var _g24 = labels.length;
		while(_g33 < _g24) {
			var i = _g33++;
			var nextIndex = i + 1;
			if(nextIndex >= labels.length) {
				nextIndex = 0;
			}
			var label = labels[i];
			var nextLabel = labels[nextIndex];
			label.next = nextLabel;
			nextLabel.prev = label;
		}
		symbol1.firstLabel = labels[0];
		symbol1.lastLabel = labels[labels.length - 1];
		var key2 = symbol1.name;
		if(__map_reserved[key2] != null) {
			movieSymbols.setReserved(key2,symbol1);
		} else {
			movieSymbols.h[key2] = symbol1;
		}
	}
	var tmp1 = pendingSymbolAttachments.keys();
	while(tmp1.hasNext()) {
		var keyframe5 = tmp1.next();
		var symbolId = pendingSymbolAttachments.h[keyframe5.__id__];
		keyframe5.symbol = (__map_reserved[symbolId] != null?spriteSymbols.getReserved(symbolId):spriteSymbols.h[symbolId]) != null?__map_reserved[symbolId] != null?spriteSymbols.getReserved(symbolId):spriteSymbols.h[symbolId]:__map_reserved[symbolId] != null?movieSymbols.getReserved(symbolId):movieSymbols.h[symbolId];
	}
	return flumpLibrary;
};
flump_library_FlumpLibrary.sortLabel = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b.keyframe.index,a.keyframe.index)) {
		return -1;
	} else if(_$UInt_UInt_$Impl_$.gt(a.keyframe.index,b.keyframe.index)) {
		return 1;
	}
	return 0;
};
flump_library_FlumpLibrary.prototype = {
	__class__: flump_library_FlumpLibrary
};
var flump_library_Keyframe = function() {
};
$hxClasses["flump.library.Keyframe"] = flump_library_Keyframe;
flump_library_Keyframe.__name__ = ["flump","library","Keyframe"];
flump_library_Keyframe.prototype = {
	timeInside: function(time) {
		if(this.time <= time) {
			return this.time + this.duration > time;
		} else {
			return false;
		}
	}
	,rangeInside: function(from,to) {
		if(this.timeInside(from)) {
			return this.timeInside(to);
		} else {
			return false;
		}
	}
	,rangeIntersect: function(from,to) {
		if(!this.timeInside(from)) {
			return this.timeInside(to);
		} else {
			return true;
		}
	}
	,insideRangeStart: function(from,to) {
		if(from <= to) {
			if(this.time > from) {
				return this.time <= to;
			} else {
				return false;
			}
		} else if(!(this.time > from)) {
			return this.time <= to;
		} else {
			return true;
		}
	}
	,insideRangeEnd: function(from,to) {
		if(from == to && to == this.time + this.duration) {
			return true;
		}
		if(from > to) {
			if(to <= this.time + this.duration) {
				return from > this.time + this.duration;
			} else {
				return false;
			}
		} else if(!(to <= this.time + this.duration)) {
			return from > this.time + this.duration;
		} else {
			return true;
		}
	}
	,__class__: flump_library_Keyframe
};
var flump_library_Label = function() {
};
$hxClasses["flump.library.Label"] = flump_library_Label;
flump_library_Label.__name__ = ["flump","library","Label"];
flump_library_Label.prototype = {
	__class__: flump_library_Label
};
var flump_library_Layer = function(name) {
	this.keyframes = [];
	this.name = name;
};
$hxClasses["flump.library.Layer"] = flump_library_Layer;
flump_library_Layer.__name__ = ["flump","library","Layer"];
flump_library_Layer.prototype = {
	getKeyframeForFrame: function(index) {
		var _g = 0;
		var _g1 = this.keyframes;
		while(_g < _g1.length) {
			var keyframe = _g1[_g];
			++_g;
			if(_$UInt_UInt_$Impl_$.gte(index,keyframe.index) && _$UInt_UInt_$Impl_$.gt(keyframe.index + keyframe.numFrames,index)) {
				return keyframe;
			}
		}
		return null;
	}
	,getKeyframeForTime: function(time) {
		var keyframe = this.lastKeyframe;
		while(keyframe.time > time % this.movie.duration) keyframe = keyframe.prev;
		return keyframe;
	}
	,__class__: flump_library_Layer
};
var flump_library_Symbol = function() {
};
$hxClasses["flump.library.Symbol"] = flump_library_Symbol;
flump_library_Symbol.__name__ = ["flump","library","Symbol"];
flump_library_Symbol.prototype = {
	__class__: flump_library_Symbol
};
var flump_library_MovieSymbol = function() {
	this.labels = new haxe_ds_StringMap();
	this.layers = [];
	flump_library_Symbol.call(this);
};
$hxClasses["flump.library.MovieSymbol"] = flump_library_MovieSymbol;
flump_library_MovieSymbol.__name__ = ["flump","library","MovieSymbol"];
flump_library_MovieSymbol.__super__ = flump_library_Symbol;
flump_library_MovieSymbol.prototype = $extend(flump_library_Symbol.prototype,{
	getLayer: function(name) {
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			if(layer.name == name) {
				return layer;
			}
		}
		return null;
	}
	,debug: function() {
		var largestLayerChars = Lambda.fold(this.layers,function(layer,result) {
			if(layer.name.length > result) {
				return layer.name.length;
			} else {
				return result;
			}
		},0);
		var repeat = function(character,amount) {
			var output = "";
			while(amount > 0) {
				output += character;
				--amount;
			}
			return output;
		};
		var output1 = "asdfsadf\n";
		output1 = "asdfsadf\n" + repeat(" ",largestLayerChars);
		output1 += "   ";
		var _g1 = 0;
		var _g = this.totalFrames;
		while(_g1 < _g) {
			var i = _g1++;
			if(i % 5 == 0) {
				output1 += i;
			} else if(i % 6 != 0 || i < 10) {
				output1 += " ";
			}
		}
		output1 += "\n";
		output1 += repeat(" ",largestLayerChars);
		output1 += "   ";
		var _g11 = 0;
		var _g2 = this.totalFrames;
		while(_g11 < _g2) if(_g11++ % 5 == 0) {
			output1 += "▽";
		} else {
			output1 += " ";
		}
		output1 += "\n";
		var _g12 = 0;
		var _g3 = this.layers.length;
		while(_g12 < _g3) {
			var layer1 = this.layers[_g12++];
			output1 += layer1.name + repeat(" ",largestLayerChars - layer1.name.length);
			output1 += " : ";
			var _g21 = 0;
			var _g31 = layer1.keyframes;
			while(_g21 < _g31.length) {
				var keyframe = _g31[_g21];
				++_g21;
				if(keyframe.symbolId != null) {
					output1 += "◙";
					if(keyframe.tweened) {
						output1 += repeat("▸",keyframe.numFrames - 1);
					} else {
						output1 += repeat("◉",keyframe.numFrames - 1);
					}
				} else {
					output1 += "○";
					output1 += repeat("◌",keyframe.numFrames - 1);
				}
			}
			output1 += "\n";
		}
		return output1;
	}
	,__class__: flump_library_MovieSymbol
});
var flump_library_Point = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["flump.library.Point"] = flump_library_Point;
flump_library_Point.__name__ = ["flump","library","Point"];
flump_library_Point.prototype = {
	__class__: flump_library_Point
};
var flump_library_Rectangle = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["flump.library.Rectangle"] = flump_library_Rectangle;
flump_library_Rectangle.__name__ = ["flump","library","Rectangle"];
flump_library_Rectangle.prototype = {
	__class__: flump_library_Rectangle
};
var flump_library_SpriteSymbol = function() {
	flump_library_Symbol.call(this);
};
$hxClasses["flump.library.SpriteSymbol"] = flump_library_SpriteSymbol;
flump_library_SpriteSymbol.__name__ = ["flump","library","SpriteSymbol"];
flump_library_SpriteSymbol.__super__ = flump_library_Symbol;
flump_library_SpriteSymbol.prototype = $extend(flump_library_Symbol.prototype,{
	__class__: flump_library_SpriteSymbol
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		while(_g1 < to) {
			var j = _g1++;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) {
		return;
	}
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					buf.b += String.fromCharCode(s.charCodeAt(1) == 120?Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)):Std.parseInt(HxOverrides.substr(s,1,s.length - 1)));
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null?_this.existsReserved(s):_this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null?_this1.getReserved(s):_this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		return null;
	}
};
var pixi_flump_Factory = function() { };
$hxClasses["pixi.flump.Factory"] = pixi_flump_Factory;
pixi_flump_Factory.__name__ = ["pixi","flump","Factory"];
pixi_flump_Factory.prototype = {
	__class__: pixi_flump_Factory
};
var pixi_flump_Movie = function(symbolId,resourceId) {
	this.animationSpeed = 1.0;
	this.ticker = PIXI.ticker.shared;
	this.displaying = new haxe_ds_ObjectMap();
	this.movieChildren = new haxe_ds_ObjectMap();
	this.layerLookup = new haxe_ds_StringMap();
	this.layers = new haxe_ds_ObjectMap();
	PIXI.Container.call(this);
	this.resourceId = resourceId;
	if(resourceId == null) {
		this.resource = pixi_flump_Resource.getResourceForMovie(symbolId);
		if(this.resource == null) {
			throw new js__$Boot_HaxeError("Flump movie does not exist: " + symbolId);
		}
	} else {
		this.resource = pixi_flump_Resource.get(resourceId);
		if(this.resource == null) {
			throw new js__$Boot_HaxeError("Flump resource does not exist: " + resourceId);
		}
	}
	this.resolution = this.resource.resolution;
	var _this = this.resource.library.movies;
	this.symbol = __map_reserved[symbolId] != null?_this.getReserved(symbolId):_this.h[symbolId];
	this.player = new flump_MoviePlayer(this.symbol,this,this.resolution);
	this.set_loop(true);
	this.master = true;
	this.once("added",$bind(this,this.onAdded));
};
$hxClasses["pixi.flump.Movie"] = pixi_flump_Movie;
pixi_flump_Movie.__name__ = ["pixi","flump","Movie"];
pixi_flump_Movie.__interfaces__ = [flump_IFlumpMovie];
pixi_flump_Movie.__super__ = PIXI.Container;
pixi_flump_Movie.prototype = $extend(PIXI.Container.prototype,{
	disableAsMaster: function() {
		this.master = false;
		this.off("added",$bind(this,this.onAdded));
	}
	,get_resX: function() {
		return this.x / this.resolution;
	}
	,set_resX: function(value) {
		this.x = value * this.resolution;
		return value;
	}
	,get_resY: function() {
		return this.y / this.resolution;
	}
	,set_resY: function(value) {
		this.y = value * this.resolution;
		return value;
	}
	,get_resScaleX: function() {
		return this.scale.x / this.resolution;
	}
	,set_resScaleX: function(value) {
		this.scale.x = value * this.resolution;
		return value;
	}
	,get_resScaleY: function() {
		return this.scale.y / this.resolution;
	}
	,set_resScaleY: function(value) {
		this.scale.y = value * this.resolution;
		return value;
	}
	,getLayer: function(layerId) {
		var _this = this.layerLookup;
		if((__map_reserved[layerId] != null?_this.existsReserved(layerId):_this.h.hasOwnProperty(layerId)) == false) {
			throw new js__$Boot_HaxeError("Layer " + layerId + "does not exist");
		}
		var _this1 = this.layerLookup;
		return __map_reserved[layerId] != null?_this1.getReserved(layerId):_this1.h[layerId];
	}
	,getChildDisplayObject: function(layerId,keyframeIndex) {
		if(keyframeIndex == null) {
			keyframeIndex = 0;
		}
		return this.movieChildren.h[this.player.getDisplayKey(layerId,keyframeIndex).__id__];
	}
	,getChildMovie: function(layerId,keyframeIndex) {
		if(keyframeIndex == null) {
			keyframeIndex = 0;
		}
		var child = this.getChildDisplayObject(layerId,keyframeIndex);
		if(js_Boot.__instanceof(child,pixi_flump_Movie) == false) {
			throw new js__$Boot_HaxeError("Child on layer " + layerId + " at keyframeIndex " + Std.string(_$UInt_UInt_$Impl_$.toFloat(keyframeIndex)) + " is not of type flump.Movie!");
		}
		return child;
	}
	,get_symbolId: function() {
		return this.symbol.name;
	}
	,set_loop: function(value) {
		if(value && this.player.get_playing()) {
			this.player.loop();
		} else if(value == false && this.player.get_looping()) {
			this.player.play();
		}
		return this.loop = value;
	}
	,set_onComplete: function(value) {
		return this.onComplete = value;
	}
	,set_currentFrame: function(value) {
		this.player.set_currentFrame(value);
		return value;
	}
	,get_currentFrame: function() {
		return this.player.get_currentFrame();
	}
	,get_playing: function() {
		if(!this.player.get_playing()) {
			return this.player.get_looping();
		} else {
			return true;
		}
	}
	,get_independantTimeline: function() {
		return this.player.independantTimeline;
	}
	,set_independantTimeline: function(value) {
		this.player.independantTimeline = value;
		return value;
	}
	,get_independantControl: function() {
		return this.player.independantControl;
	}
	,set_independantControl: function(value) {
		this.player.independantControl = value;
		return value;
	}
	,get_totalFrames: function() {
		return this.player.get_totalFrames();
	}
	,set_tint: function(pTint) {
		var tmp = this.movieChildren.iterator();
		while(tmp.hasNext()) {
			var child = tmp.next();
			if(js_Boot.__instanceof(child,pixi_flump_Sprite)) {
				(js_Boot.__cast(child , pixi_flump_Sprite)).tint = pTint;
			} else if(js_Boot.__instanceof(child,pixi_flump_Movie)) {
				(js_Boot.__cast(child , pixi_flump_Movie)).set_tint(pTint);
			}
		}
		return this.tint = pTint;
	}
	,stop: function() {
		this.player.stop();
	}
	,play: function() {
		if(this.loop) {
			this.player.loop();
		} else {
			this.player.play();
		}
	}
	,gotoAndStop: function(frameNumber) {
		if(!this.loop) {
			if(_$UInt_UInt_$Impl_$.gt(frameNumber,this.player.get_totalFrames() - 1)) {
				frameNumber = this.player.get_totalFrames() - 1;
			} else if(frameNumber < 0) {
				frameNumber = 0;
			}
		}
		this.player.goToFrame(frameNumber).stop();
	}
	,gotoAndPlay: function(frameNumber) {
		if(!this.loop) {
			if(_$UInt_UInt_$Impl_$.gt(frameNumber,this.player.get_totalFrames() - 1)) {
				frameNumber = this.player.get_totalFrames() - 1;
			} else if(frameNumber < 0) {
				frameNumber = 0;
			}
		}
		if(this.loop) {
			this.player.goToFrame(frameNumber).loop();
		} else {
			this.player.goToFrame(frameNumber).play();
		}
	}
	,getLabelFrame: function(label) {
		return this.player.getLabelFrame(label);
	}
	,tick: function() {
		this.player.advanceTime(this.ticker.elapsedMS * this.animationSpeed);
	}
	,onAdded: function(to) {
		this.once("removed",$bind(this,this.onRemoved));
		this.ticker.add($bind(this,this.tick));
	}
	,onRemoved: function(from) {
		this.once("added",$bind(this,this.onAdded));
		this.ticker.remove($bind(this,this.tick));
	}
	,createLayer: function(layer) {
		this.layers.set(layer,new PIXI.Container());
		this.layers.h[layer.__id__].name = layer.name;
		var v = this.layers.h[layer.__id__];
		var _this = this.layerLookup;
		var key = layer.name;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,v);
		} else {
			_this.h[key] = v;
		}
		this.addChild(this.layers.h[layer.__id__]);
	}
	,getChildPlayer: function(keyframe) {
		return this.movieChildren.h[keyframe.displayKey.__id__].player;
	}
	,createFlumpChild: function(displayKey) {
		this.movieChildren.set(displayKey,this.resource.createDisplayObject(displayKey.symbolId));
	}
	,removeFlumpChild: function(layer,displayKey) {
		this.layers.h[layer.__id__].removeChildren();
	}
	,addFlumpChild: function(layer,displayKey) {
		this.layers.h[layer.__id__].addChild(this.movieChildren.h[displayKey.__id__]);
	}
	,onAnimationComplete: function() {
		if(this.onComplete != null) {
			this.onComplete();
		}
	}
	,renderFrame: function(keyframe,x,y,scaleX,scaleY,skewX,skewY,alpha,tintMultiplier,tintColor) {
		var layer = this.layers.h[keyframe.layer.__id__];
		var lChild = null;
		var spriteSymbol = null;
		layer.x = x;
		layer.y = y;
		if(this.master) {
			layer.x /= this.resolution;
			layer.y /= this.resolution;
		}
		if(layer.children.length > 0) {
			lChild = layer.getChildAt(0);
			lChild.scale.x = scaleX;
			lChild.scale.y = scaleY;
			if(this.master) {
				lChild.scale.x /= this.resolution;
				lChild.scale.y /= this.resolution;
			}
		}
		if(layer.name != "flipbook") {
			if(js_Boot.__instanceof(keyframe.symbol,flump_library_SpriteSymbol)) {
				if(lChild != null) {
					spriteSymbol = keyframe.symbol;
					lChild.pivot.x = keyframe.pivot.x - spriteSymbol.origin.x;
					lChild.pivot.y = keyframe.pivot.y - spriteSymbol.origin.y;
					if(this.master) {
						lChild.pivot.x /= this.resolution;
						lChild.pivot.y /= this.resolution;
					}
				}
			} else if(lChild != null && js_Boot.__instanceof(lChild,PIXI.Container) && (js_Boot.__cast(lChild , PIXI.Container)).children.length > 0 && (js_Boot.__cast(lChild , PIXI.Container)).getChildAt(0).name == "flipbook") {
				lChild.pivot.x = keyframe.pivot.x;
				lChild.pivot.y = keyframe.pivot.y;
				if(this.master) {
					lChild.pivot.x /= this.resolution;
					lChild.pivot.y /= this.resolution;
				}
			} else if(lChild != null) {
				lChild.x = -scaleX * keyframe.pivot.x;
				lChild.y = -scaleY * keyframe.pivot.y;
				if(this.master) {
					lChild.x /= this.resolution;
					lChild.y /= this.resolution;
				}
			}
		}
		layer.skew.x = skewX;
		layer.skew.y = skewY;
		layer.alpha = alpha;
		if(keyframe.layer.refAnimatedTint == null) {
			keyframe.layer.refAnimatedTint = new flump_filters_AnimateTintFilter(tintColor,tintMultiplier);
		} else {
			keyframe.layer.refAnimatedTint.update(tintColor,tintMultiplier);
		}
		if(tintMultiplier != 0) {
			layer.filters = [keyframe.layer.refAnimatedTint];
		} else if(layer.filters != null) {
			layer.filters = null;
		}
	}
	,setMask: function(layer) {
		if(layer.mask != null) {
			var lRect = this.getLayer(layer.mask).getChildAt(0).getBounds();
			this.getLayer(layer.mask).removeChildAt(0);
			var lGraph = new PIXI.Graphics();
			lGraph.beginFill(0);
			lGraph.drawRect(lRect.x,lRect.y,lRect.width,lRect.height);
			lGraph.endFill();
			this.getLayer(layer.mask).addChild(lGraph);
			this.layers.h[layer.__id__].mask = lGraph;
		}
	}
	,labelPassed: function(label) {
		this.emit("labelPassed",label.name);
	}
	,labelHit: function(label) {
		this.emit("labelHit",label.name);
	}
	,destroy: function() {
		this.stop();
		this.set_onComplete(null);
		var tmp = this.layers.iterator();
		while(tmp.hasNext()) tmp.next().removeChildren();
		this.symbol = null;
		this.player = null;
		PIXI.Container.prototype.destroy.call(this,true);
	}
	,getBaseClass: function() {
		return this.symbol.baseClass;
	}
	,getCustomData: function() {
		return this.symbol.data;
	}
	,getLayerCustomData: function(layerId,keyframeIndex) {
		if(keyframeIndex == null) {
			keyframeIndex = 0;
		}
		if(this.symbol.getLayer(layerId) == null) {
			throw new js__$Boot_HaxeError("Layer " + layerId + " does not exist.");
		}
		var keyframe = this.symbol.getLayer(layerId).getKeyframeForFrame(keyframeIndex);
		if(keyframe == null) {
			throw new js__$Boot_HaxeError("Keyframe does not exist at index " + Std.string(_$UInt_UInt_$Impl_$.toFloat(keyframeIndex)));
		}
		return keyframe.data;
	}
	,__class__: pixi_flump_Movie
});
var pixi_flump_Parser = function() { };
$hxClasses["pixi.flump.Parser"] = pixi_flump_Parser;
pixi_flump_Parser.__name__ = ["pixi","flump","Parser"];
pixi_flump_Parser.parse = function(resolution,loadFromCache) {
	if(loadFromCache == null) {
		loadFromCache = true;
	}
	return function(resource,next) {
		if(resource.data == null || resource.isJson == false) {
			return;
		}
		if(!Object.prototype.hasOwnProperty.call(resource.data,"md5") || !Object.prototype.hasOwnProperty.call(resource.data,"movies") || !Object.prototype.hasOwnProperty.call(resource.data,"textureGroups") || !Object.prototype.hasOwnProperty.call(resource.data,"frameRate")) {
			return;
		}
		var lib = flump_library_FlumpLibrary.create(resource.data,resolution);
		var textures = new haxe_ds_StringMap();
		var atlasLoader = new PIXI.loaders.Loader();
		atlasLoader.baseUrl = resource.url.replace(new RegExp("/(.[^/]*)$","i".split("u").join("")),"");
		var _g = 0;
		var _g1 = lib.atlases;
		while(_g < _g1.length) {
			var atlasSpec = [_g1[_g]];
			++_g;
			atlasSpec[0].file += loadFromCache?"":"?" + new Date().getTime();
			var tmp = (function(atlasSpec1) {
				return function(atlasResource) {
					var atlasTexture = new PIXI.BaseTexture(atlasResource.data);
					atlasTexture.resolution = resolution;
					var _g2 = 0;
					var _g3 = atlasSpec1[0].textures;
					while(_g2 < _g3.length) {
						var textureSpec = _g3[_g2];
						++_g2;
						var frame = new PIXI.Rectangle(textureSpec.rect[0],textureSpec.rect[1],textureSpec.rect[2],textureSpec.rect[3]);
						var origin = new PIXI.Point(textureSpec.origin[0],textureSpec.origin[1]);
						origin.x = origin.x / frame.width;
						origin.y = origin.y / frame.height;
						var v = new PIXI.Texture(atlasTexture,frame);
						var key = textureSpec.symbol;
						if(__map_reserved[key] != null) {
							textures.setReserved(key,v);
						} else {
							textures.h[key] = v;
						}
					}
				};
			})(atlasSpec);
			atlasLoader.add(atlasSpec[0].file,null,tmp);
		}
		atlasLoader.once("complete",function(loader) {
			var flumpResource = new pixi_flump_Resource(lib,textures,resource.name,resolution);
			if(resource.name != null) {
				var _this = pixi_flump_Resource.resources;
				var key1 = resource.name;
				if(__map_reserved[key1] != null) {
					_this.setReserved(key1,flumpResource);
				} else {
					_this.h[key1] = flumpResource;
				}
			}
			resource.data = flumpResource;
			next();
		});
		atlasLoader.load();
	};
};
var pixi_flump_Resource = function(library,textures,resourceId,resolution) {
	this.library = library;
	this.textures = textures;
	this.resourceId = resourceId;
	this.resolution = resolution;
};
$hxClasses["pixi.flump.Resource"] = pixi_flump_Resource;
pixi_flump_Resource.__name__ = ["pixi","flump","Resource"];
pixi_flump_Resource.exists = function(resourceName) {
	var _this = pixi_flump_Resource.resources;
	if(__map_reserved[resourceName] != null) {
		return _this.existsReserved(resourceName);
	} else {
		return _this.h.hasOwnProperty(resourceName);
	}
};
pixi_flump_Resource.destroy = function(resourceName) {
	var _this = pixi_flump_Resource.resources;
	if((__map_reserved[resourceName] != null?_this.existsReserved(resourceName):_this.h.hasOwnProperty(resourceName)) == false) {
		throw new js__$Boot_HaxeError("Cannot destroy FlumpResource: " + resourceName + " as it does not exist.");
	}
	var _this1 = pixi_flump_Resource.resources;
	var resource = __map_reserved[resourceName] != null?_this1.getReserved(resourceName):_this1.h[resourceName];
	var _this2 = resource.textures;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
	while(tmp.hasNext()) tmp.next().destroy();
	resource.library = null;
	pixi_flump_Resource.resources.remove(resourceName);
};
pixi_flump_Resource.get = function(resourceName) {
	var _this = pixi_flump_Resource.resources;
	if(!(__map_reserved[resourceName] != null?_this.existsReserved(resourceName):_this.h.hasOwnProperty(resourceName))) {
		throw new js__$Boot_HaxeError("Flump resource: " + resourceName + " does not exist.");
	}
	var _this1 = pixi_flump_Resource.resources;
	return __map_reserved[resourceName] != null?_this1.getReserved(resourceName):_this1.h[resourceName];
};
pixi_flump_Resource.getResourceForMovie = function(symbolId) {
	var _this = pixi_flump_Resource.resources;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) {
		var resource = tmp.next();
		var _this1 = resource.library.movies;
		if(__map_reserved[symbolId] != null?_this1.existsReserved(symbolId):_this1.h.hasOwnProperty(symbolId)) {
			return resource;
		}
	}
	throw new js__$Boot_HaxeError("Movie: " + symbolId + "does not exists in any loaded flump resources.");
};
pixi_flump_Resource.getResourceForSprite = function(symbolId) {
	var _this = pixi_flump_Resource.resources;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) {
		var resource = tmp.next();
		var _this1 = resource.library.sprites;
		if(__map_reserved[symbolId] != null?_this1.existsReserved(symbolId):_this1.h.hasOwnProperty(symbolId)) {
			return resource;
		}
	}
	throw new js__$Boot_HaxeError("Sprite: " + symbolId + " does not exists in any loaded flump resources.");
};
pixi_flump_Resource.prototype = {
	createMovie: function(id) {
		var movie = pixi_flump_Resource.flumpFactory != null && pixi_flump_Resource.flumpFactory.displayClassExists(id)?Type.createInstance(pixi_flump_Resource.flumpFactory.getMovieClass(id),[]):new pixi_flump_Movie(id,this.resourceId);
		movie.disableAsMaster();
		return movie;
	}
	,createSprite: function(id) {
		if(pixi_flump_Resource.flumpFactory != null && pixi_flump_Resource.flumpFactory.displayClassExists(id)) {
			return Type.createInstance(pixi_flump_Resource.flumpFactory.getSpriteClass(id),[]);
		} else {
			return new pixi_flump_Sprite(id,this.resourceId);
		}
	}
	,createDisplayObject: function(id) {
		var displayObject;
		var _this = this.library.movies;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			displayObject = this.createMovie(id);
		} else {
			displayObject = this.createSprite(id);
		}
		displayObject.name = id;
		return displayObject;
	}
	,__class__: pixi_flump_Resource
};
var pixi_flump_Sprite = function(symbolId,resourceId) {
	this.symbolId = symbolId;
	this.resourceId = resourceId;
	var resource;
	if(resourceId != null) {
		resource = pixi_flump_Resource.get(resourceId);
		if(resource == null) {
			throw new js__$Boot_HaxeError("Library: " + resourceId + "does has not been loaded.");
		}
	} else {
		resource = pixi_flump_Resource.getResourceForSprite(symbolId);
	}
	this.resolution = resource.resolution;
	var _this = resource.library.sprites;
	var symbol = __map_reserved[symbolId] != null?_this.getReserved(symbolId):_this.h[symbolId];
	var _this1 = resource.textures;
	var key = symbol.texture;
	var texture = __map_reserved[key] != null?_this1.getReserved(key):_this1.h[key];
	PIXI.Sprite.call(this,texture);
	this.data = symbol.data;
	this.baseClass = symbol.baseClass;
	this.anchor.x = symbol.origin.x / texture.width;
	this.anchor.y = symbol.origin.y / texture.height;
};
$hxClasses["pixi.flump.Sprite"] = pixi_flump_Sprite;
pixi_flump_Sprite.__name__ = ["pixi","flump","Sprite"];
pixi_flump_Sprite.__super__ = PIXI.Sprite;
pixi_flump_Sprite.prototype = $extend(PIXI.Sprite.prototype,{
	get_resX: function() {
		return this.x / this.resolution;
	}
	,set_resX: function(value) {
		this.x = value * this.resolution;
		return value;
	}
	,get_resY: function() {
		return this.y / this.resolution;
	}
	,set_resY: function(value) {
		this.y = value * this.resolution;
		return value;
	}
	,get_resScaleX: function() {
		return this.scale.x / this.resolution;
	}
	,set_resScaleX: function(value) {
		this.scale.x = value * this.resolution;
		return value;
	}
	,get_resScaleY: function() {
		return this.scale.y / this.resolution;
	}
	,set_resScaleY: function(value) {
		this.scale.y = value * this.resolution;
		return value;
	}
	,getBaseClass: function() {
		return this.baseClass;
	}
	,getCustomData: function() {
		return this.data;
	}
	,__class__: pixi_flump_Sprite
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
com_isartdigital_ruby_Main.configPath = "config.json";
com_isartdigital_utils_game_StateGraphic.animAlpha = 1;
com_isartdigital_utils_game_StateGraphic.boxAlpha = 0;
com_isartdigital_utils_Config.cache = true;
com_isartdigital_utils_Config._data = { };
com_isartdigital_utils_Debug.QR_SIZE = 0.35;
com_isartdigital_utils_events_EventType.GAME_LOOP = "gameLoop";
com_isartdigital_utils_events_EventType.RESIZE = "resize";
com_isartdigital_utils_events_EventType.ADDED = "added";
com_isartdigital_utils_events_EventType.REMOVED = "removed";
com_isartdigital_utils_events_LoadEventType.COMPLETE = "complete";
com_isartdigital_utils_events_LoadEventType.LOADED = "load";
com_isartdigital_utils_events_LoadEventType.PROGRESS = "progress";
com_isartdigital_utils_events_LoadEventType.ERROR = "error";
com_isartdigital_utils_events_MouseEventType.MOUSE_MOVE = "mousemove";
com_isartdigital_utils_events_MouseEventType.MOUSE_DOWN = "mousedown";
com_isartdigital_utils_events_MouseEventType.MOUSE_OUT = "mouseout";
com_isartdigital_utils_events_MouseEventType.MOUSE_OVER = "mouseover";
com_isartdigital_utils_events_MouseEventType.MOUSE_UP = "mouseup";
com_isartdigital_utils_events_MouseEventType.MOUSE_UP_OUTSIDE = "mouseupoutside";
com_isartdigital_utils_events_MouseEventType.CLICK = "click";
com_isartdigital_utils_events_MouseEventType.RIGHT_DOWN = "rightdown";
com_isartdigital_utils_events_MouseEventType.RIGHT_UP = "rightup";
com_isartdigital_utils_events_MouseEventType.RIGHT_UP_OUTSIDE = "rightupoutside";
com_isartdigital_utils_events_MouseEventType.RIGHT_CLICK = "rightclick";
com_isartdigital_utils_events_TouchEventType.TOUCH_START = "touchstart";
com_isartdigital_utils_events_TouchEventType.TOUCH_MOVE = "touchmove";
com_isartdigital_utils_events_TouchEventType.TOUCH_END = "touchend";
com_isartdigital_utils_events_TouchEventType.TOUCH_END_OUTSIDE = "touchendoutside";
com_isartdigital_utils_events_TouchEventType.TAP = "tap";
com_isartdigital_utils_game_GameStage.SAFE_ZONE_WIDTH = 2048;
com_isartdigital_utils_game_GameStage.SAFE_ZONE_HEIGHT = 1366;
com_isartdigital_utils_game_factory_MovieClipAnimFactory.textureDigits = 4;
com_isartdigital_utils_loader_GameLoader.txtLoaded = new haxe_ds_StringMap();
com_isartdigital_utils_system_DeviceCapabilities.SYSTEM_ANDROID = "Android";
com_isartdigital_utils_system_DeviceCapabilities.SYSTEM_IOS = "iOS";
com_isartdigital_utils_system_DeviceCapabilities.SYSTEM_BLACKBERRY = "BlackBerry";
com_isartdigital_utils_system_DeviceCapabilities.SYSTEM_BB_PLAYBOOK = "BlackBerry PlayBook";
com_isartdigital_utils_system_DeviceCapabilities.SYSTEM_WINDOWS_MOBILE = "IEMobile";
com_isartdigital_utils_system_DeviceCapabilities.SYSTEM_DESKTOP = "Desktop";
com_isartdigital_utils_system_DeviceCapabilities.ICON_SIZE = 0.11;
com_isartdigital_utils_system_DeviceCapabilities.TEXTURE_NO_SCALE = "";
com_isartdigital_utils_system_DeviceCapabilities.TEXTURE_HD = "hd";
com_isartdigital_utils_system_DeviceCapabilities.TEXTURE_MD = "md";
com_isartdigital_utils_system_DeviceCapabilities.TEXTURE_LD = "ld";
com_isartdigital_utils_system_DeviceCapabilities.texturesRatios = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved.hd != null) {
		_g.setReserved("hd",1);
	} else {
		_g.h["hd"] = 1;
	}
	if(__map_reserved.md != null) {
		_g.setReserved("md",0.5);
	} else {
		_g.h["md"] = 0.5;
	}
	if(__map_reserved.ld != null) {
		_g.setReserved("ld",0.25);
	} else {
		_g.h["ld"] = 0.25;
	}
	$r = _g;
	return $r;
}(this));
com_isartdigital_utils_system_DeviceCapabilities.textureRatio = 1;
com_isartdigital_utils_system_DeviceCapabilities.textureType = "";
com_isartdigital_utils_system_DeviceCapabilities.screenRatio = 1;
com_isartdigital_utils_ui_UIPosition.LEFT = "left";
com_isartdigital_utils_ui_UIPosition.RIGHT = "right";
com_isartdigital_utils_ui_UIPosition.TOP = "top";
com_isartdigital_utils_ui_UIPosition.BOTTOM = "bottom";
com_isartdigital_utils_ui_UIPosition.TOP_LEFT = "topLeft";
com_isartdigital_utils_ui_UIPosition.TOP_RIGHT = "topRight";
com_isartdigital_utils_ui_UIPosition.BOTTOM_LEFT = "bottomLeft";
com_isartdigital_utils_ui_UIPosition.BOTTOM_RIGHT = "bottomRight";
com_isartdigital_utils_ui_UIPosition.FIT_WIDTH = "fitWidth";
com_isartdigital_utils_ui_UIPosition.FIT_HEIGHT = "fitHeight";
com_isartdigital_utils_ui_UIPosition.FIT_SCREEN = "fitScreen";
com_isartdigital_utils_ui_smart_TextSprite.parseText = com_isartdigital_utils_ui_smart_TextSprite.defaultParseText;
flump_library_Label.LABEL_ENTER = "labelEnter";
flump_library_Label.LABEL_EXIT = "labelExit";
flump_library_Label.LABEL_UPDATE = "labelUpdate";
haxe_ds_ObjectMap.count = 0;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved.gt != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved.amp != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved.quot != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved.apos != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = { }.toString;
pixi_flump_Resource.resources = new haxe_ds_StringMap();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
